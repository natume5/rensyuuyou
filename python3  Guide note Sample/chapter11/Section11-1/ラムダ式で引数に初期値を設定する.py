# ラムダ式で引数に初期値を設定する
price = lambda burger=1, potato=0: burger * 240 + potato * 100
# burger=1, potato=0   受け取る引数
# burger * 240 + potato * 100   計算する式
print(price(potato=2))
"""
ラムダ式を使用すると、このpep8警告が表示されます。 ラムダ式は推奨されませんか？
 そうでない場合はなぜですか？
    ラムダ式を名前に直接バインドする割り当てステートメントの代わりに、
    常にdefステートメントを使用します。
    はい：
     def f(x): return 2*x

    いいえ：
     f = lambda x: 2*x

    最初の形式は、結果の関数オブジェクトの名前が、
    一般的な「<lambda>」ではなく具体的​​に「f」であることを意味します。
     これは、一般的なトレースバックや文字列表現に役立ちます。
     割り当てステートメントを使用すると、ラムダ式が明示的な
     defステートメントに対して提供できる唯一の利点がなくなります
     （つまり、大きな式の中に埋め込むことができる）

 ラムダを名前に割り当てることは、基本的にdefの機能を複製するだけであり、
 一般的に、混乱を避けて明確さを高めるために何かを行うのが最善です。
lambdaの正当な使用例は、関数を割り当てずに使用したい場合です。例えば：
sorted(players, key=lambda player: player.rank)
単純な操作のために、 operatorモジュールはattrgetter 、
 itemgetter 、およびmethodcallerでいくつかの便利なオプションを提供します。
 これらのオプションは、属性、アイテムにアクセスし、
 メソッドを呼び出すだけのlabmdasを頻繁に置き換えます
たとえば、上記はoperator.attrgetterように実行できます。
"""
