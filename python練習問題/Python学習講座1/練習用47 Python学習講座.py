#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座---")
print("--- pandas入門  NumPy入門 NumPyとは---")


"""
NumPyとは

科学技術計算やWebデータの分析などの大規模なデータを取り扱う場合、
多次元かつ大量のベクトル（=配列）の演算が必要になります。

PythonはCやJavaなどのコンパイラ言語と比較するとかなり遅いため、
そうった演算を行うと難儀するのですが、
NumPyの配列オブジェクト「ndarray」を使用することで高速なデータ処理が可能となります。

また、科学技術計算の基礎ライブラリとしてさまざまな基本的な演算機能を提供しているため、
Scipy、Matplotlib、Pandasなど多くのライブラリNumPyに依存しています。

このため、基礎部分のNumPyを理解することにより、
前述のScipy、Matplotlib、Pandasなどの理解を深めることができると思います。


NumPyのインストールとインポート

pipでインストール可能です。anacondaは予めインストールされているため
NumPyを使用する場合はこちらを使うと便利です。

pip install numpy

インポートする際はnpと名前を付けるのが一般的です。
例えば、numpyをインポートし、3行3列の行列を生成する場合は以下のように記述します。
（詳細は別途説明します。）
"""

import numpy as np

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])
print(x)

# [[11 12 13]
#  [21 22 23]
#  [31 32 33]]
"""
用語について

NumPyで用意されている配列はndarrayというNumPy独自の型なのですが、
今後このndarrayでベクトルや行列を表します。
「NumPyの配列」だと少し長いので今後は単純に「array」もしくは「配列」と記述します。

また、実はNumPyには配列とは別に「matrix（行列）」という型があるのですが、
あまり使われなくなりつつあるらしいため、当サイトでは線形代数と同様、
単純に2次元の配列のことを行列と呼称します。
"""


print("--- pandas入門  NumPy入門 配列生成---")


"""
まずは基本としてNumPyの一次元配列について学習します。


NumPyの配列生成

配列はarray関数にリストやタプルのようなシーケンシャルオブジェクトを指定することで
生成することができます。
"""

x = np.array([1, 0, 1])
print(x)

# [1 0 1]


"""
さまざまな配列生成

配列の生成時に範囲、間隔、個数、型などを指定することができます。

範囲指定 、間隔指定

arangeを使用すると範囲や間隔を指定することができます。
"""

x = np.arange(1, 10)     # 1以上10未満の配列を生成
print(x)

# [1 2 3 4 5 6 7 8 9]

x = np.arange(1, 10, 2)     # 1以上10未満、間隔2の配列を生成
print(x)

# [1 3 5 7 9]


"""
個数指定

linspaceを使用すると個数を指定することができます。
"""

x = np.linspace(1, 2, 5)    # 1～2で5個の要素
print(x)

# [1.   1.25 1.5  1.75 2.  ]


"""
データタイプを指定する

numpyには独自の型があり、引数dtypeで適切な型設定することにより
メモリ使用量を節約することができます。
詳細な型や型変換については別項にて説明します。
上のサンプルのように型を指定しない場合はnumpy.int64となります。
例えば、float32を指定する場合は以下のように記述します。
"""

x = np.array([1, 0, 1], dtype='float32')
print(x)

# [1. 0. 1.]

"""
配列へのデータアクセス

リストやタプルのような通常のシーケンシャルオブジェクトと同様に添字でアクセスすることができます。
"""

# 配列を生成
x = np.array([1, 2, 3, 4, 5])

# 0番目にアクセス
print(x[0])     # 1


# スライスで0番目から2番目未満にアクセス
print(x[0:2])    # [1 2]

# 最後の要素にアクセス
print(x[-1])    # 5


print("--- pandas入門  NumPy入門 型と型変換---")


"""
NumPyにはPythonの型とは別に独自の型が用意されています。

NumPyの型

以下URLから基本的な演算でよく使用するものを抜粋しました。
https://docs.scipy.org/doc/numpy-dev/user/basics.types.html

型 	                 説明
bool 	          真偽型
int8 	          8ビット符号付き整数
int16 	          16ビット符号付き整数
int32 	          32ビット符号付き整数
int64 	          64ビット符号付き整数
uint8 	          8ビット符号なし整数
uint16 	          16ビット符号なし整数
uint32 	          32ビット符号なし整数
uint64  	      64ビット符号なし整数
float16 	      16ビット浮動小数点
float32 	      32ビット浮動小数点
float64 	      64ビット浮動小数点
complex64 	      64ビット複素数
complex128 	      １２８ビット複素数

上記以外にも、C言語と互換の型などがあります。詳細はリンク先を参照してください。


型の指定

ここでも少し説明しましたが、配列の生成時にdtypeで型を指定することができます。
配列全ての要素が同じ型になります。

型を指定する場合は文字列か、nu.型名で指定します。
"""

# import numpy as np

# 文字列で指定
x = np.array([1, 2, 3], dtype='int64')
print(x)
# [1 2 3]

# np.で指定
x = np.array([1, 2, 3], dtype=np.int64)
print(x)
# [1 2 3]


"""
型変換

作成後の配列に対してastypeを使用して型変換を行うことができます。
例えばint32からfloat32に型を変える場合は以下のようにします。
"""

# import numpy as np

x = np.array([1, 2, 3, 4, 5], dtype='int32')
y = x.astype('float32')
print(x)    # [1 2 3 4 5]
print(y)    # [1. 2. 3. 4. 5.]

"""
元のインスタンスは破壊されない点に注意してください。
"""


print("--- pandas入門  NumPy入門 ベクトルの演算---")


"""
NumPyでベクトルを生成する方法について学習しました。
ここではベクトルの基本的な演算について学習します。


ベクトルの演算

加法、スカラー倍、内積、外積は以下の方法で計算することが可能です。

ndarrayの演算

ndarrayには演算が定義されていて、+、-でベクトルの加減演算を行うことができます。
また、*、/で要素ごとに積・商（いわゆるアダマール積）を計算することができます。
"""

# import numpy as np

x = np.array([1, 2, 3])
y = np.array([4, 5, 6])

print(x + y)    # [5 7 9]

print(x - y)    # [-3 -3 -3]

print(x * y)    # [ 4 10 18]

print(x / y)    # [0.25 0.4  0.5 ]


"""
スカラー倍

*演算子で定数を作用させるとスカラー倍することができます。
"""

# import numpy as np

x = np.array([1, 2, 3])
a = 100

print(x * a)    # [100 200 300]

print(a * x)    # [100 200 300]


"""
内積

np.dotで内積を計算することができます。
例えば以下のサンプルでは直行する基底の内積が0になることが確認できます。
"""

# import numpy as np

e1 = np.array([1, 0, 0])
e2 = np.array([0, 5, 0])

print(np.dot(e1, e2))    # 0

"""
クロス積

最後にクロス積(=外積)です。numpy.crossで求めることができます。
"""

# import numpy as np

e1 = np.array([1, 0, 0])
e2 = np.array([0, 5, 0])

print(np.cross(e1, e2))    # [0 0 5]

print(np.cross(e2, e1))    # [ 0  0 -5]

"""
上のサンプルでは結果が法線ベクトルになっていることが分かります。
"""


print("--- pandas入門  NumPy入門 行列(2次元配列)生成---")


"""
行列(2次元配列)

np.arrayの引数に2次元のリストを指定することで行列を表すことができます。
たとえば、3行3列の行列を生成する場合は以下のように記述します。
"""

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])
print(x)

# [[11 12 13]
#  [21 22 23]
#  [31 32 33]]


"""
データアクセス

では次に生成した行列に対してアクセスしてみましょう。
要素を取得

行、列の順で添字を指定すると行列要素を取得することができます。
"""

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])
print(x[0, 2])    # 13 1行3列目の13が取得できる

print(x[2, 0])    # 31 3行1列目の31が取得できる

"""
スライス

スライスを使用することができます。
2 x 2の部分行列を抽出する場合、以下のように記述することができます。
"""

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])

print(x[0:2, 0:2])    # 行と列0～2未満を取得？(2は入らない)

# [[11 12]
#  [21 22]]

"""
行の抽出

最初の添字だけを指定すると、行を抽出することができます。
1行めを取得する場合、以下のように記述します。
"""

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])

row = x[0]
print(row)    # [11 12 13]

"""
列の抽出

スライスが可能ですので、行を全て(コロン)指定すると2番めの添字で列を抽出することができます。
"""

x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])

col = x[:, 1]    # 0から数えて1番目の列を取得
print(col)    # [12 22 32]


print("--- pandas入門  NumPy入門 よく使う行列の生成(単位行列・ゼロ行列・三角行列)---")


"""
単位行列

単位行列の生成にはeyeを使用します。引数にサイズを指定します。
"""

E = np.eye(4)
print(E)

# [[1. 0. 0. 0.]
#  [0. 1. 0. 0.]
#  [0. 0. 1. 0.]
#  [0. 0. 0. 1.]]

"""
三角行列

三角行列の生成にはtriを指定します。やはり引数にサイズを指定します。
"""

TR = np.tri(4)
print(TR)

# [[1. 0. 0. 0.]
#  [1. 1. 0. 0.]
#  [1. 1. 1. 0.]
#  [1. 1. 1. 1.]]

"""
ゼロ行列

ゼロ行列の生成にはzerosを使用します。
引数に行×列のタプルやリストを指定します。
例えば、２行３列のゼロ行列を生成する場合は以下のように記述します。
"""

ZERO = np.zeros((2, 3, ))
print(ZERO)

# [[0. 0. 0.]
#  [0. 0. 0.]]

"""
要素が全て1の行列

onesを使用すると要素が全て1の行列を生成することができます。
引数に行×列のタプルやリストを指定します。
"""

ONES = np.ones((3, 2, ))
print(ONES)

# [[1. 1.]
#  [1. 1.]
#  [1. 1.]]


print("--- pandas入門  NumPy入門 行列の演算---")


"""
NumPyで基本的な行列を生成する方法について学習しました。
ここでは生成した行列を計算する方法について学習します。

ndarrayの四則演算

まず、ndarrayの四則演算について確認しましょう。
ndarrayには演算が定義されていますが、掛け算も加減算と同様、
要素ごとに計算を行うだけのもの（いわゆるアダマール積）なので注意してください。
つまり、一般的な行列の積（内積）とは異なります。
"""

# import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

b = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])

print(a + b)    # 足し算
# [[11 22 33]
#  [44 55 66]
#  [77 88 99]]

print(a - b)    # 引き算
# [[ -9 -18 -27]
#  [-36 -45 -54]
#  [-63 -72 -81]]

print(a * b)    # 掛け算
# [[ 10  40  90]
#  [160 250 360]
#  [490 640 810]]

print(a / b)    # 割り算
# [[0.1 0.1 0.1]
#  [0.1 0.1 0.1]
#  [0.1 0.1 0.1]]

"""
上記サンプルでは２つの行列a, bに対して演算を行っています。
和差は通常の行列計算と同様ですが、積は要素ごとに掛け算されていることが確認できます。
また、一般的な行列演算とは異なり要素ごとの割り算も定義されています。


行列の計算

では行列の和、差、積についてです。和、差はndarrayの演算になりますので細かい説明は省略します。

和・差
ndarrayの+、-で和・差の計算が可能です。先ほどのサンプルの和差部分のみ再掲します。
"""

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

b = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])

# 足し算
print(a + b)


# 引き算
print(a - b)

"""
積（内積）

それでは掛け算（内積）です。np.dotを使用します。
行列a、bに対し、a×bを行う場合はnp.dot(a, b)と記述します。
"""

# import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

b = np.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])

print(np.dot(a, b))

# [[ 6 12 18]
#  [15 30 45]
#  [24 48 72]]

"""
もうひとつサンプルです。単位行列を左右から掛け算し、値が変わらないことを確認してみましょう。
"""

# import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
e = np.eye(3)

print(np.dot(a, e))

# [[1. 2. 3.]
#  [4. 5. 6.]
#  [7. 8. 9.]]

print(np.dot(e, a))

# [[1. 2. 3.]
#  [4. 5. 6.]
#  [7. 8. 9.]]

"""
左右どちらからでも値が変わらないことが確認できました。
"""
