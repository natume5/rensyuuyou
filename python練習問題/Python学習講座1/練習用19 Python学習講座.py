#!/usr/bin/python
# -*- coding: UTF-8 -*-


# import math
# from decimal import Decimal
# from fractions import Fraction


print("--- Python学習講座---")
print("--- Python入門　list(リスト)型の基本と初期化---")


"""
listとは

前回の冒頭で軽く説明しましたが、
list型とはシーケンスの一種で順序付けられた複数の値をひとまとまりの変数として扱うことができます。
また、for文といった制御文を使用すると、格納した複数の値を順番に処理することが可能になります。
なお、以降list型の変数のことを単にリストと記述する場合があります。

また、リストは生成後に後から要素の値を変えたり、値を挿入したり、値をソートしたり
といった様々な機能が予め用意されています。
このため、覚えることが多い反面、使いこなせるようになると様々な場面で活用することができます。


listの初期化
[]を使用した初期化

さっそく実際にlistを使ってみましょう。まずはlist型の変数を初期化、生成します。
list型の変数を生成する場合は、大カッコの中に、カンマ区切りで値を列挙して初期値を定義することができます。
初期化
変数 = [要素1, 要素2, , ,]

大カッコの中に何も書かない場合は、空のリストが生成されます。サンプルを見てみましょう。
"""

# 数値のリスト
l1 = [1, 3, 5, 7, 9]

# 文字列のリスト。重複してもOK
l2 = ['pen', 'pineapple', 'apple', 'pen']

# 型の異なる変数も入れられる
l3 = [1, 'pen', l1, l2]

# 空のリスト
l4 = []

"""
l1は数値のリストです。l2は文字列のリストです。
重複がある値も挿入することが可能です。
そして、l3では、数値、文字に加え、リスト型オブジェクも挿入しています。
そう、Pythonのリストには何でも挿入できてしまいます。
最後のl4では空のリストを生成しています。


list関数による初期化

また、初期化でもう一つ重要なのがlist関数と呼ばれる組み込みの関数を使用する方法です。
引数にシーケンスを指定すると、その要素と同じリストが生成されます。
リストをコピーする際に使用することができます。

サンプルを見てみましょう。
"""

l1 = [1, 2, 3]
l2 = list(l1)

"""
上のサンプルではリストl1と同じ内容のリストl2が生成されています。
補足

また、listの初期化にはリスト内包表記と呼ばれる非常に強力な記法がPythonには用意されています。
制御文のforについて学習した後説明します。リスト内包表記
"""

"""
リストの要素を取得する

インデックスの指定

次にリストの要素にアクセスしてみましょう。識別子の後に大カッコでインデックスを指定する方法が最も簡単です。
サンプルで確認してみましょう。
"""

l = [1, 2, 3, 4, 5]

print(l[0])    # 1
print(l[1])    # 2
print(l[4])    # 5
"""
print(l[5]) # IndexError: list index out of range

0を指定すると、0番目の要素が取得できます。
また、リストの範囲を超えたインデックスを指定すると、IndexErrorが発生します。


listの最後の要素を取得する

Pythonのリストはlistの最後の要素を取得するには-1を指定します。
さらに、マイナスのインデックスで末尾から指定することもできます。
"""

l = [1, 2, 3, 4, 5]

print(l[-1])    # 5
print(l[-4])    # 2
print(l[-5])    # 1
"""
print(l[-6]) # IndexError: list index out of range


スライス構文

マイナスのインデックスに加え、Pythonのリストで重要な構文がスライス構文です。
リストに対し範囲を指定してアクセスすることができます。

スライス構文は開始インデックスと終了インデックスをコロンでつなげて指定します。
開始インデックスを省略すると、開始インデックスは0になります。
終了インデックスを省略すると、終了インデックスは-1（最後尾）になります。
終了インデックスで指定した値は結果に含まれないので注意してください。
また、範囲を超えたインデックスを指定しても、IndexErrorは発生しません。

サンプルで確認してみましょう。
"""

# リストの初期化
l = ['a', 'b', 'c', 'd', 'e']

# 0番目から0番目(1番目は取得されない)
print(l[0:1])    # ['a']

# 0番目から1番目(2番目は取得されない)
print(l[0:2])    # ['a', 'b']

# 1番目から3番目
print(l[1:4])    # ['b', 'c', 'd']

# 0番目から最後の一つ手前まで
print(l[0:-1])    # ['a', 'b', 'c', 'd']

# 0番目から最後まで
print(l[0:])    # ['a', 'b', 'c', 'd', 'e']

# 0番目から98番目まで(エラーは発生しない)
print(l[:99])    # ['a', 'b', 'c', 'd', 'e']

"""
最初は少々難しく感じるかもしれませんが、なれると非常に便利な記法です。


listの要素数を確認する

リストの要素数はlen関数を利用します。
（実はlen関数はリストのみならずシーケンス型全般で使用することが可能です。）
"""

l = [1, 2, 3, 4, 0]

print(len(l))    # 5

print(l[len(l) - 1])    # 0

"""
lenで要素数が取得出来ていることがわかると思います。
また、lenで取得した値 - 1でリストの最後尾が取得できていることも確認できると思います。
"""


print("--- Python入門　list(リスト)型の更新と削除---")


"""
リストの要素を更新

インデックスを指定して、listの要素を参照することができましたが、
代入することによりlistの要素を更新することができます。

更新
リスト型変数[インデックス] = 更新値
"""

l = [1, 2, 3, 4, 0]

l[0] = 99
print(l)    # [99, 2, 3, 4, 0]

"""
この例の場合、0番目の要素が初期化時に1でしたが、99に更新されていることが確認できます。


リストに要素を追加

リストの最後尾に要素を追加する場合は、appendメソッドを利用します。

要素の追加
リスト型変数.append(追加したい変数)
"""

l = [1, 2, 3]
l.append(4)
print(l)    # [1, 2, 3, 4]

"""
一番最後に4が追加されたことが確認できると思います。


リストに要素を挿入

途中に要素を追加する場合、insertメソッドを利用します。
特定の位置に要素を追加
list型変数.insert(挿入する位置を示すインデックス, 挿入する変数)

サンプルで確認してみましょう。
"""

# 0番目に挿入する
l = ['a', 'b', 'c']
l.insert(0, 'x')
print(l)    # ['x', 'a', 'b', 'c']

# 2番目に挿入する
l.insert(2, 'y')
print(l)    # ['x', 'a', 'y', 'b', 'c']

# 最後尾に挿入する
l.insert(-1, 'z')
print(l)    # ['x', 'a', 'y', 'b', 'z', 'c']

"""
指定したインデックスの位置に挿入されたことが確認できます。


リストの要素を削除

リストの要素削除にはいくつかの方法があります。順番に見てみましょう。

指定した要素を削除

指定した要素を削除する場合は、remove関数を使います。
"""

l = ['a', 'b', 'c', 'd', 'c']

# aを削除する
l.remove('a')
print(l)    # ['b', 'c', 'd', 'c']

# 重複した値を削除すると、先頭側のものが削除される
l.remove('c')
print(l)    # ['b', 'd', 'c']

"""
# 存在しない値を指定するとValueErrorが発生
l.remove('e') # ValueError: list.remove(x): x not in list

指定した値が削除されますが、同じ値がリストに挿入されている場合は、先頭側の値が削除されます。

また、リストに存在しない値を指定した場合は、ValueErrorが発生するので注意しましょう。


指定したインデックスを削除

インデックスを指定して削除することも可能です。
del文を使用する方法とpopメソッドを利用する2つの方法があります。

del文

delの構文は以下の通りです。
削除
del list型変数[削除対象インデックス]

さっそく使い方を見てみましょう。
以下のコードでは(0番目から数えて)2番目の要素が削除されたことが確認できます。
"""

l = ['a', 'b', 'c', 'd']

del l[2]    # インデックスが2の要素を削除
print(l)     # ['a', 'b', 'd']

"""
先頭、末尾を削除する場合は以下の通りそれぞれ0、-1を指定します。
"""

l = ['a', 'b', 'c', 'd']

del l[0]    # 最初の要素を削除
print(l)    # ['b', 'c', 'd']

del l[-1]     # 最後の要素を削除
print(l)    # ['b', 'c']

"""
もちろん、インデックス指定にスライス構文を使うこともできます。
"""

l = ['a', 'b', 'c', 'd']

del l[0:2]    # 0番目から2番目前まで削除
print(l)    # ['c', 'd']

"""
この場合、(0から数えて)0番目から2番目の手前まで削除されます。
(0から数えて)2番目自身は削除されないので注意してください。


popメソッド

リストにはpopメソッドという指定されたインデックスの要素を削除し、
その要素を戻り値として返すメソッドが用意されていますがこれを削除として使用することができます。
"""

l = ['a', 'b', 'c', 'd']

x = l.pop(2)    # 2番目の要素を取り出して削除する
print(x)    # 'c'
print(l)    # ['a', 'b', 'd']

"""
上のサンプルでは、popした値がxに格納されていることが確認できます。
また、引数に何も指定しない場合は末尾の要素が削除されます。
"""


print("--- Python入門　list(リスト)型のソート---")


"""
リストのソート

リストをソートする場合、以下の2通りの方法があります。

    元のlistはソートせず新たにソートされたlistを作成する組込みのsorted関数を利用する方法
    list型変数自身が持つsortメソッドを利用して自身をソートする方法


新たにソートされたlistを生成

新たにソートされたlistを生成したい場合、sortedを利用します。この場合、元のリストはソートされません。
sorted
sorted(list型変数, [key], [reverse])

keyとreverseの指定は任意です。


昇順にソートする

引数にlistのみ指定する場合です。
"""

l1 = ['d', 'b', 'c', 'a']
l2 = sorted(l1)
print(l2)    # ['a', 'b', 'c', 'd']

"""
ソート順序を逆順にする

引数のreverseにTrueを指定すると、ソート順序が逆順になります。
"""

l1 = ['d', 'b', 'c', 'a']
l2 = sorted(l1, reverse=True)
print(l2)    # ['d', 'c', 'b', 'a']

"""
大文字、小文字を区別せずにソートする

keyを指定すると、ソート前に行う処理を指定できます。

正確に理解するためには、後に説明する関数オブジェクトについて理解する必要がありますが、
このページではひとまず、具体的な大文字、小文字を区別せずにソートする方法の説明だけにとどめます。

さて、大文字、小文字を区別せずにソートする方法ですが、具体的には引数keyにstr.lowerを指定します。
ソート処理前にリストの各要素がいったんすべて小文字に変換されて、それらがソートされた結果が返却されます。

サンプルを見てみましょう。
"""

l1 = ['bc', 'ac', 'bD', 'AB']
l2 = sorted(l1)
print(l2)    # ['AB', 'ac', 'bD', 'bc']

l2 = sorted(l1, key=str.lower)
print(l2)    # ['AB', 'ac', 'bc', 'bD']

"""
key=str.lowerを指定することにより、大文字、小文字の区別なくソートされていることが確認できます。


リスト自身をソートする

リストそのものをソートしたい場合、sortメソッドを利用します。
（このメソッドのように元々の変数の内容が変更されてしまうような作用のことを「破壊的」と呼びます。）
sort
list型変数.sorte([key], [reverse])

これもkeyとreverseの指定は任意です。
組み込み関数のsorted関数と使い方はほとんど同じですので、細かい説明は省略します。

昇順にソートする
"""

l = ['d', 'b', 'c', 'a']
l.sort()
print(l)    # ['a', 'b', 'c', 'd']

"""
ソート順序を逆順にする
"""

l = ['d', 'b', 'c', 'a']
l.sort(reverse=True)
print(l)    # ['d', 'c', 'b', 'a']

"""
大文字、小文字を区別せずにソートする
"""

l = ['bc', 'ac', 'bD', 'AB']
l.sort(key=str.lower)
print(l)    # ['AB', 'ac', 'bc', 'bD']

"""
いずれのサンプルでも、もともと初期化したリストがソートされて破壊的に更新されたことが確認できます。
"""
