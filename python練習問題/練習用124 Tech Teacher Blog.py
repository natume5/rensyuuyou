#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Tech Teacher Blog ---")
print("--- PythonのNumPyの使い方を分かりやすく解説！配列の演算方法も ---")


"""
Pythonで機械学習やディープラーニングなどを行う際に用いられるライブラリで有名なのが
「NumPy」モジュールです。
NumPyはベクトルや行列の演算を行うのに便利なライブラリとなっており、
高速かつ効率的に数値計算を行うことができます。
ですが、NumPyを学習している段階でつまずいてしまう人も多いです。
この記事では、NumPyの役割、使い方を分かりやすく解説します。
機械学習を行う際には必須のライブラリなので、ぜひ参考にしてください。
"""


print("--- PythonのNumPyとは ---")


"""
最初にPythonにおけるNumPyの役割やNumPyを使ってできることを解説します。
まずはNumPyで何ができるのかを理解して、これからの学習の指針を立てておきましょう。


NumPyの役割

NumPyは機械学習やディープラーニングを行う際に使われる拡張ライブラリです。
ベクトルや行列といった数学的対象を処理するのに便利なライブラリになっています。
基本的な計算処理であればNumPyを使わずともできますが、
大量のデータを処理するような場合には処理が遅くなるため、
高速な数値計算が必要な場合にはNumPyを使うことが多いです。
つまり、NumPyはベクトルや行列の計算を高速に処理するためのライブラリと覚えておけば大丈夫です。


ライブラリとは

NumPyは「ベクトルや行列を処理するためのライブラリ」だと書きました。
では「ライブラリ」とは何なのでしょうか。
Pythonを使っていると、NumPyだけでなく他にも多くのライブラリを使用することになります。
そこで、ライブラリについても簡単に理解しておきましょう。
ライブラリとは、クラスや関数がまとめられたものです。
簡単に言えば、Pythonに拡張機能を提供してくれるものと思ってください。
ライブラリは「モジュール」や「パッケージ」と呼ばれることもあります。
今回のNumPyは数値計算を効率的に行うための機能をまとめたものになっています。
ライブラリにはPython公式が用意した「標準ライブラリ」とユーザーが作成・配布している
「外部ライブラリ」または「サードパーティライブラリ」がありますが、NumPyは外部ライブラリに該当します。


NumPyでできること

NumPyを使用することによって、ベクトルや行列の演算、乱数生成など様々なことができるようになります。
通常のPythonで処理を行うよりもずっと早く処理できるので、
大量のデータを扱う機械学習ではNumPyが利用されるのです。
基本的には、数値計算を高速で行うことができると覚えておけば問題ありません。


NumPyの基本的な使い方

それではNumPyの基本的な使い方を解説します。
まずは基本をマスターしておくことが大事なので、ここで理解しておきましょう。
"""

import numpy as np


x = np.array([1, 2, 3])
print(x)    # [1 2 3]

"""
上記のコードがＮｕｍＰｙの基本的な使い方です。

まず、NumPyは外部ライブラリなので、import文を使ってNumPyを使えるようにする必要があります。
それが１行目の「ｉｍｐｏｒｔ　ｎｕｍｐｙ　ａｓ　ｎｐ」です。
NumPyを呼び出すときはｎｐと名前をつけるのが一般的になっているので、
変更する理由がなければ「ａｓ　ｎｐ」としてNumPyを読み込みましょう。
ここではリスト［１，２，３］をｎｐ．array関数に渡して配列［１　２　３］を生成、
print関数で表示させています。
これが基本的なNumPyの使い方になります。
NumPyを読み込まなければｎｐ．ａｒｒａｙ関数を使用することはできないので、
１行目の「ｉｍｐｏｒｔ　ｎｕｍｐｙ　ａｓ　ｎｐ」を忘れないようにしましょう。
"""


print("--- NumPyの実践方法・具体例 ---")


"""
それでは、実際にNumPyでの具体的な配列の作り方や計算方法を解説していきます。
途中で分からなくなったときには、先ほど説明したNumPyの基本的な使い方を見直してみてくださいね。


配列とは

NumPyでの配列について説明していく前に、配列とは何かを簡単に説明しておきましょう。
配列とは、複数のデータを１つにまとめたものを指します。
たくさんのデータを収納することのできる箱をイメージしてみてください。
箱の中のデータのそれぞれを「要素」と呼び、
各要素は「添字」または「インデックス」と呼ばれる番号で区別します。
１つ目の要素の添字が０となり、続いて１、２、３、…と自動的に番号が振られていきます。
変数のようにそれぞれのデータに名前を付けることができない代わりに、
配列の名前と対応する添字でデータを呼び出すことになります。

まとめると、

    複数のデータをまとめたものが「配列」
    配列に格納されたそれぞれのデータが「要素」
    要素を呼び出すときに使われるのが「添字」

と覚えておいてください。


１次元配列と多次元配列

NumPyでは１次元配列や２次元・３次元配列のような多次元配列が頻繁に出てきます。
そこで配列の作り方を説明する前に、１次元配列と多次元配列について解説しておきます。

まずは１次元配列です。これが基本的な配列になります。次の例を見てください。
ａ　＝　［１，２，３］

これは３つのデータ「１」「２」「３」が入った１次元配列です。
「ａ」という１つの箱の中に３つのデータがあります。
この配列の０番目の要素「１」を呼び出すには「ａ［０］」とします。
１次元配列はイメージ通りで分かりやすいですね。

次に２次元配列ですが、コードで記述すると次のようになります。
ｂ　＝　［［１，２，３］，［４，５］］

これは２つの配列「［１，２，３］」と「［４，５］」が入った２次元配列です。
「ｂ」という箱の中に、さらに２つの箱が入っているイメージですね。
この配列の中のデータ「３」は、第０要素「［１，２，３］」の第２要素になっています。
そこでこのデータを呼び出すには「ｂ［０］［２］」とします。
２次元配列を考えるときには、オセロのようなマス目をイメージすると分かりやすいですね。
３次元配列では次のようになります。



ｃ　＝　［［［１，２，３］，［４，５］］，［［６，７，８，９］，
［１０］，［１１，１２］］］

この３次元配列ｃには２つの２次元配列
「［１，２，３］，［４，５］」と「［６，７，８，９］，［１０］，［１１，１２］」
が要素として入っています。１次元配列としては合計で５個が入っていることになりますね。

この配列の中のデータ「８」は第１要素
「［６，７，８，９］，［１０］，［１１，１２］」
の第０要素「［６，７，８，９］」の中にあり、その第２要素になっています。
そこでこのデータを呼び出すには「ｃ［１］［０］［２］」とします。
言葉にすると少し複雑ですが、実は難しいことではないので、自分で確認してみてくださいね。
３次元配列を考えるときには、ルービックキューブをイメージしてみてください。
このように、多次元配列とは「配列が入った配列」と考えることができます。
入れ子になったたくさんの箱をイメージしてくださいね。


配列の作り方

それでは実際にNumPyでの配列の作り方をサンプルコードで解説していきます。

配列の作り方は先ほど基本的な使い方で説明した通りです。
ｉｍｐｏｒｔ　ｎｕｍｐｙ　ａｓ　ｎｐ

ｘ　＝　ｎｐ．ａｒｒａｙ（［１，２，３］）
ｐｒｉｎｔ（ｘ）

〇実行結果
［１　２　３］

これが１次元配列の作り方です。

ここで、配列がどのようにできているかを確認できるshape属性を使用して、
配列の形状を確認してみます。上のコードに次のコードを追加してみましょう。
ｐｒｉｎｔ（ｘ．ｓｈａｐｅ）

〇実行結果
（３，）

この結果は要素が３つ格納されていることを表しています。
数学的には、１次元配列は１次行列、すなわちベクトルに対応します。

多次元配列も同じように作ることができます。
まずは２次元配列を作ってみましょう。
"""

# import numpy as np


x = np.array([[1, 2], [3, 4], [5, 6]])
print(x)
# [[1 2]
#  [3 4]
#  [5 6]]

"""
ｓｈａｐｅ属性を使ってみると、（３，２）と表示されます。
"""

print(x.shape)    # (3, 2)

"""
数学的には、２次元配列は２次行列に対応します。
上の結果は、配列として３×２の行列ができたことを意味します。
３次元配列の場合も同様です。
"""

# import numpy as np


x = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(x)
# [[[ 1  2  3]
#   [ 4  5  6]]

#  [[ 7  8  9]
#   [10 11 12]]]

"""
同じように、shape属性を使って形状の確認をしてみましょう。
"""

print(x.shape)    # (2, 2, 3)

"""
これは２×２×３の３次行列ができたことを意味します。


配列の計算方法

次に配列を計算処理する方法を解説します。
まずは先ほどと同じように２次元配列を作ります。
"""

# import numpy as np


x = np.array([[1, 2], [3, 4]])
print(x)
# [[1 2]
#  [3 4]]

"""
この配列の各要素に１を加算するコードを書きましょう。上のコードに追加して、次のように書いてください。
"""
