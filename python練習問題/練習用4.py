#!/usr/bin/python
# -*- coding: UTF-8 -*-


# 関数の呼び出し方
"""
次のような関数を呼び出す時、引数を指定する方法に2通りあります。
"""
def func(arg1, arg2, arg3):
	print("arg1は:", arg1, "arg2は:", arg2, "arg3は:", arg3)

# 1つはこれまで見たように、
func("引数1", "引数2", "引数3")

"""
と、引数を順番に並べる方法です。この方法で指定する書き方を、位置引数と言います。
もう一つは、
"""
func(arg1="引数1", arg2="引数2", arg3="引数3")
func("引数1", arg2="引数2", arg3="引数3")
"""
のように、引数名=値 という形式で、引数名を指定する方法です。
個の書き方を、キーワード引数といいます。
キーワード引数の場合、位置引数と違って、好きな順番で引数を指定できます。
func("引数1", "引数2", "引数3")
と
func(arg3="引数3", arg2="引数2", arg1="引数1")
は、引数の順番は違いますが、どちらも同じ結果になります。
また、位置引数とキーワード引数は混ぜて使うことも出来ます。
"""

# デフォルト引数
"""
def 関数名(引数名=デフォルト値):
	・・・
"""
def func1(arg=999):    # デフォルト値として999が指定
	print(arg)

func1(12345)    # 引数を指定してfunc1を呼び出すと、指定した値が出力
func1()    # 引数を省略してfunc1を呼び出すと、デフォルト値である999が出力される


def fruit_price(number_of_momo, number_of_mikan, name="上"):
    total_momo = number_of_momo * 200
    total_mikan = number_of_mikan * 40
    total = total_momo + total_mikan

    print(name, "様: もも", number_of_momo, "個と、みかん", number_of_mikan, "個で、", total, "円です")

fruit_price(10, 20, "python.jp")
fruit_price(50, 60)

# Pythonの型とオブジェクト
# Pythonオブジェクトの型
"""
def foo():
	print("hi!")
このfooも、関数型のオブジェクト

import math
のようにインポートしたmathモジュールは、モジュール型のmathオブジェクトと呼ばれる。
"""

#オブジェクトでないもの
"""
一方で、これまで学んできたいろいろな演算子や
while文 ・ if文 などはPythonに対する実行命令で、
実体のあるオブジェクトではありません。数値などの値のように、
変数に代入したり、関数のように関数名を指定したりと、
プログラマが名前をつけられるものはオブジェクト、
whileのようにつけられないものはオブジェクトではない、と考えると良いと思います。
"""
"""
これまで、数値や文字列などの使い方を学んできましたが、こういった個別の値ひとつひとつではなく、
一連の値を並べて、ひとまとめにした情報というのもよく必要になります。

たとえば、「東海道新幹線の停車駅」という情報は、「東京, 品川, 新横浜, 小田原, 熱海」 という、
駅の名前の文字列を、停車順に並べた情報です。あるいは、「ある伝染病の毎日の感染者数を一週間分」
という情報は、「100, 125, 110, 135, 93, 95, 93」のような、毎日の感染者数の整数を7つ、
日付順に並べた情報です。このような、複数の値を決まった順番に並べ、
ひとまとめにした情報は日常生活でもよく見かけます。
こういった、決まった順番に並んだ値で構成される情報は、Pythonではリストオブジェクトで表現します。
リストオブジェクトは、他のオブジェクトを 要素 として登録できるオブジェクトで、
他のプログラミング言語では配列などと呼ばれることもあります。
"""


# リストオブジェクトの作成
"""
 [要素1, 要素2, ・・・]
"""

# 要素の参照
stations = ["東京", "品川", "新横浜", "小田原", "熱海"]
print(stations)    # ["東京", "品川", "新横浜", "小田原", "熱海"]
print(stations[0])    # 東京
print(stations[1])    # 品川
print(stations[0], stations[1], stations[2], stations[3], stations[4])
# 東京, 品川, 新横浜, 小田原, 熱海


cases = [100, 125, 110, 135, 93, 95, 93]
print(cases)    # [100, 125, 110, 135, 93, 95, 93]
total = cases[0] + cases[1] + cases[2]    # ７日前から５日前までの感染者数の合計を求める
print(total)


empty_list = []
print(empty_list)    # []


# リストの操作
# 要素の挿入
"""
リストに要素を追加するときは、リストのメゾットである insert() を使用する。
リストオブジェクト.insert(挿入位置, オブジェクト)
"""
values = ['A', 'B', 'C']
print("修正前:", values)

values.insert(0, 999)
print("修正後:", values)


values = ['A', 'B', 'C']
print("修正前:", values)

values.insert(3, 999)
print("修正後:", values)


# 要素の置き換え
"""
登録済みの要素を別の要素に置き換える時は、次のように記述する。
リストオブジェクト[インデックス] = 値
"""
values = ['A', 'B', 'C']
print("修正前:", values)

values[1] = 'abc'
print("修正後:", values)


# 要素の削除
"""
リストオブジェクトに登録されている要素を削除するときは、del文を使います。
del リストオブジェクト[インデックス]
"""
values = ['A', 'B', 'C', 'D']
print("修正前:", values)

del values[1]
print("修正後:", values)


# while文を使ったリストのループ処理
cases = [100, 125, 110, 135, 93, 95, 93]

index = 0    # インデックス値の初期値 0 を設定
total = 0    # 合計感染者数の初期値 0 を設定

while index < 7:    # インデックス値 < 感染者リストの要素数の間、ループを繰り返す
	cases_of_day = cases[index]
	total = total + cases_of_day    # totalにcases[index]を加算
	index = index + 1

print("合計感染者数は:", total)
