#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Tech Teacher Blog ---")
print("--- Pythonのif文がわかる！基礎から応用まで分かりやすく解説します！ ---")


"""
人工知能や機械学習で人気が沸騰中のPython。
最近では自宅でプログラミングを学習できるので、独学で学んでいる方も多いでしょう。
そんなPythonで必須とも言えるのが条件分岐のif文。
ですが、if文はややこしい点が多く、分かりくいのも事実です。
この記事ではif文の役割、使い方を学習につまずいた人でも分かりやすく解説します。
"""


print("--- if文の基礎 ---")


"""
最初にｉｆ文の役割や基本的な使い方について説明します。
実際にプログラムを書くうえでもｉｆ文の使用頻度は高いので、きちんと基礎を理解しておきましょう。


if 文とは

if文は条件分岐のための文法です。Pythonのみならず、
JavaやRubyなど様々なプログラミング言語で同様の処理が使われています。

ifは「もし」という意味で、「もし◯◯ならば××する」という処理を表します。
例えば「データがある条件◯◯を満たす場合にのみ、そのデータに××という処理をする」
というような場合に使われます。


if文の役割

先ほど紹介した通り、if文は条件を分岐させて指示を出す役割があり、
言葉で説明すると「もし◯◯ならば××する」になります。

例えば、答案の採点プログラムを作ったとします。
答案を採点して、

１００点を取っていた場合は「満点です」
９０点〜７０点なら「合格水準に達しています」
６０点以下は「もう少し頑張りましょう」

と表示したい場合、多くのプログラマはif文を使って処理を行います。

与えられたデータに対してどのような処理をするかをif文の中に記述しておくことで、
対応したそれぞれの処理を実行できます。
少し難しいですが、役割を把握しておくことで応用に活かせるので、ぜひ理解しておきましょう。


真偽値について

if文の使い方を説明する前に真偽値について説明します。
真偽値とは、条件が満たされているかどうかを示す値で、満たされている場合「True」、
満たされていない場合「False」になります。
分かりにくい方は「True」を「YES」、「False」を「NO」と覚えておき、
「True」の時に処理が実行され、「False」の時は処理が実行されないと理解しておけば大丈夫ですよ。

if文の基本的な使い方

それでは、 if文の簡単な使い方を説明します。

i f　条件式１：
条件式１が True の時に行う処理

e l i f　条件式２：
条件式１が False で、かつ条件式２が True の時に行う処理

e l i f　条件式３：
条件式１，２がともに False で、かつ条件式３が True の時に行う処理
・・・

e l s e：上の条件式がどれも False の時に行う処理

「ｅｌｉｆ」と「ｅｌｓｅ」については後から解説しますが、上記の場合、
まず条件式１がＴｒｕｅだった場合には最初の処理が実行されます。
条件式１が実行されなかった時には、条件式２が判定され、
条件式２がＴｒｕｅであれば第二の処理が実行されます。
条件式２が実行されなかった時には…と繰り返していき、
条件がどれも満たされなかった時には「ｅｌｓｅ」の中の処理が実行されることになります。
コードを書いている時に分からなくなったら「もし◯◯ならば××する」
を思い出すだけで理解できることもあります。
最初は難しくても自分でコードを書いている内に慣れてくるので、どんどん練習してみてくださいね。
"""


print("--- if文でよく使われる文法をそれぞれ解説 ---")


"""
次に、ｉｆ文でよく使われている文法・条件式をそれぞれ解説します。
特に比較演算子はよく使われるのでチェックしておいてくださいね。

比較演算子について

ｉｆ文を使った条件分岐で頻繁に使われるのが、比較演算子です。
比較演算子は２つの式や値を比較して結果を真偽値で返します。
例えば「Ａ　＜　Ｂ」とすると、Ｂの値がＡの値より大きい時にTrueとなります。
比較演算子は記号で表され、いくつか種類があるので、以下の図にまとめておきますね。

演算子の記号 	        例文 	               結果
= = 	           A = = B 	               左右の値が等しいときTrue
! = 	           A ! = B 	               左右の値が等しくないときTrue
< 	               A < B 	               Aの値がBの値より小さいときTrue
< = 	           A < = B 	               Aの値がBの値より小さいとき、
                                           または値が等しいときTrue
> 	               A > B 	               Aの値がBの値より大きいときTrue
> = 	           A > = B 	               Aの値がBの値より大きいとき、
                                           または値が等しいときTrue

イコールの位置を間違えて「＝＞」などとすると比較演算子として認識されないので、注意してください。
下にそれぞれの比較演算子を使った例文も紹介します。
演算子 	        結果
6 + 2 == 8 	    True
2 * 4 ! = 4 	True
8 / 4 < 5 	    True
2 > 6 	        False
4 + 2 >= 6 	    True
2 * 5 <= 9 	    False

以上の例文では、比較演算子で計算式を比較しています。
計算を途中に入れて比較演算をすることが良くあるので、覚えておいてくださいね。


elseの使い方

if文と組み合わされる文法の中でも重要な文法の１つがelse文です。
「else」を使うことで「もし◯◯ならば××する、そうでなければ△△する」と分岐させることができます。
ほとんど場合、else文はif文の最後に記述され、if文の条件がFalseの場合に実行されます。

elifの使い方

if文で条件が成り立たなかった場合にさらに条件分岐させたい場合は、elif文を使います。
「elif」を使うと、「もし◯◯ならば××する、そうでなくて□□ならば■■する、そうでなければ…」
と処理できます。「elif」は何個でも使うことができますが、
最初に条件があてはまったものが実行されます。

"""


print("--- 比較演算子を使ったサンプルコード ---")


"""
それでは、これまで解説してきた比較演算子、「elif」や「else」を使って、
先ほど例に出した答案採点プログラムのコードを書いてみましょう。
分岐である「elif」「else」を使うと複数行でコードを記述できます。次の例を見てください。
"""

score = 50

if score == 100:
	print('満点です')

elif 70 <= score and score <= 90:
	print('合格水準に達しています')

else:
	print('もう少し頑張りましょう')

# もう少し頑張りましょう

"""
１００点以上で「満点です」、９０点から７０点を取っていた場合は「合格水準に達しています」、
それ以外の場合６０点以下の場合は「もう少し頑張りましょう」と表示されるプログラムです。
上記の場合は、点数を入れた変数「 SCORE 」の値が「 50 」なので「もう少し頑張りましょう」
が表示されます。「 SCORE 」に「 100 」を入れると「満点です」、
「 90 」～「 70 」の値にすると「もう少し頑張りましょう」が表示されることを確認してみてください。
今回紹介したコードで使用している「 and 」は論理演算子で、
２つ以上の演算子を組み合わせる場合に使われます。詳しくは次で説明します。


論理演算子について

論理演算子を使うと、複数の条件式を組み合わせて使うことができます。
論理演算子には論理和「 or 」、論理積「 and 」、否定「 not 」があります。

演算子の文字 	       例文 	           結果
and 	         A and B 	      ＡとＢがともにTrueならTrue、
                                  それ以外はFalse
or 	             A or B 	      ＡとＢのどちらか一方でもTrueならTrue、
                                  どちらもFalseならFalse
not 	         not A 	          ＡがTrueならFalse、ＡがFalseならTrue

噛み砕いて説明すると、「 and 」は両方がTrueの場合に実行、
「 or 」はどちらかの条件がTrueの場合に実行、
「 not 」は条件が満たされなかった場合に実行されます。
２つ以上組み合わせるので少しややこしいですが、
１つずつ見ていけば分かりやすいので、混乱したら前に戻って確認してみましょう。
論理演算子を使った例文も紹介しておきます。

A＝20とした場合
条件式 	                結果
A > 30 and A < 25 	    False
A < 30 or A > 30 	    True
not A < 15 	            True

「Ａ＝２０」とした時の結果を右の列に表示しています。
「 and 」を使った演算式は「Ａ＞３０」がFalseのため結果がFalse、
「 or 」は「Ａ＜３０」がTrueのためTrue、
「 not 」は「Ａ＜１５」がFalseとなるためTrueになります。
「 not 」を使った演算式が少しややこしいので、気をつけてくださいね。


論理演算子を使ったサンプルコード

最後に論理演算子の使用例を示しておくので、参考にしてみてください。
論理演算子「ａｎｄ」を使ったコード
"""

A = 20
if 10 <= A and A <= 30:
	print('Aは10以上30以下です')

"""
■実行結果
Ａは１０以上３０以下です上記のコードは　
「Ａ」の値が１０以上３０以下の場合に「Ａは１０以上３０以下です」と表示させるコードです。
いま、「Ａ」の値は「２０」で「１０＜＝Ａ」と「Ａ＜＝３０」のどちらもＴｒｕｅなので、
「Ａは１０以上３０以下です」と表示されます。
どちらもＴｒｕｅでないと実行されないのが論理演算子「 and 」です。
論理演算子「ｏｒ」を使ったコード
"""

A = 60
if 10 > A or A > 30:
	print('Aは10未満又は30より大きいです')

"""
■実行結果
Ａは１０未満または３０より大きいです上記のコードは
「Ａ」の値が１０未満または３０より大きい場合に
「Ａは１０未満または３０より大きいです」と表示するコードです。
いま、「Ａ」の値は「６０」で「１０＞Ａ」はFalseですが、
「Ａ＞３０」がTrueのため「Ａは１０未満または３０より大きいです」と表示されます。
どちらか一方でもTrueであれば実行されるのが論理演算子「 or 」です。
論理演算子「ｎｏｔ」を使ったコード
"""

A = 55
if not A == 77:
	print('Aは77ではありません')

"""
■実行結果
Ａは７７ではありません上記のコードは「Ａ」の値が「７７」ではない場合に
「Ａは７７ではありません」と表示するコードです。
いま、「Ａ」の値は「５５」で「Ａ＝＝７７」がFalseになるため、
「 not　Ａ＝＝７７」はTrueになり「Ａは７７ではありません」と表示されます。
条件式がFalseの場合に実行されるのが論理演算子に「 not 」です。
"""


print("--- まとめ ---")


"""
ｉｆ文は比較演算子や論理演算子のような難しい言葉がでてくるため、
学習段階でつまずく人が多いのも事実です。
基礎をきちんと理解しておけば実は難しいことではなく、応用も効くので、
ぜひこの記事を参考に学習を進めてみてください。
"""
