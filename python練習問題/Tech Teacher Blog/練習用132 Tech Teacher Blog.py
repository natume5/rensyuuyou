#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Tech Teacher Blog ---")
print("--- 【Python】appendの使い方を理解しよう！役割や実践方法を徹底解説！ ---")


"""
Python を始めたばかりの方で、append を使用している途中でつまずいてしまう人もいるでしょう。

・「基本的なappendの役割が知りたい」

・「appendの基本的な使い方が知りたい」

・「appendの実践的な使用方法が知りたい」

このような方に、Pythonリストの基本から extend と insert との違いも踏まえて詳しく説明します。
"""


print("--- Python リストの基本 ---")


"""
appendを詳しく説明する前に、Pythonリストの基本について説明します。
知っている人もいるかもしれませんが、再度確認しておきましょう。

Pythonのリストとは

リストとは、情報を入れておくための箱のことで、複数の箱を同時に管理できます。
実際に、リストを作成するコードを交えて詳しく説明していきますね。
"""

list = []
print(list)    # []

"""
リストでは、空のリストを作成することも可能ですが、最初から要素を入れることもできます。
要素は、数字でも文字でもOKです。
数字の場合、Pythonは計算可能な数値として認識しますが、
文字として数字を入れたいケースも存在しますよね。
文字として数字を入れたい場合は、下記のように「”」で囲みましょう。
"""

list_a = ['123']
print(list_a)    # ['123']

"""
このように数字を文字として認識させ、計算に用いないようにできます。
また、複数の要素を入れる場合は、「, 」で区切りましょう。


インデックスとは

一度作成したリストは、１つの要素を呼び出したり、自由に編集したりすることが可能です。
要素には順序があり、それぞれインデックスと呼ばれる番号が付いています。
下記のようにインデックスは０から順に始まり、その番号を指定することで対応する要素を取り出せます。

　　　　　　　　０ 　１　 ２　 ３　 ４　　　　＃前から
l i s t _ 1 ＝ ［”ａ”，”ｂ”，”ｃ”，”ｄ”，”ｅ”］
l i s t _ 2 ＝ ［ １ ， ２ ， ３ ， ４ ， ５ ］
　　　　　　　−５   −４   −３   −２   −１　　　　＃後ろから

下記のように、インデックスを用いてリスト内の要素を呼び出すことができます。
"""

list_a = ["a", "b", "c", "d", "e"]
print(list_a[2])    # c

"""
また、後ろから数えた要素を呼び出したいときは「－（マイナス）」を使用します。
"""

list_a = ["a", "b", "c", "d", "e"]
print(list_a[-2])    #  d

"""
複数の要素を一気に取る場合は「：」を使用します。
先頭から途中まで取る場合は下記の通りです。
"""

list_a = ["a", "b", "c", "d", "e"]
print(list_a[:2])    # ['a', 'b']

"""
途中から末尾まで取る場合は下記の通りです。
"""

ist_a = ["a", "b", "c", "d", "e"]
print(list_a[2:])    # ['c', 'd', 'e']


print("--- Python の append とは？ ---")


"""
appendとは「添える」「付加する」という意味で、Pythonのappendとは、
その名前の通りリストに要素を追加するためのメソッドです。
それでは、appendの役割や基本の使い方、またextendやinsertとの違いをご説明しますね。


append の役割

appendの役割は、既存のリストに単一の要素を追加することです。
新しい要素は返されませんが、リストの末尾に追加することで、元のリストを変更します。
リストにappendメソッドを実行した際、リストの要素数が１つ増加します。
appendメソッドは、複数の要素を一度に追加することはできません。
単一の要素を入力パラメータとして受け取った後にリストの末尾に追加します。
また、appendはリストのメソッドです。
そのため、タプル・str・dicといったイミュータブルなオブジェクトや、
setなどリスト以外には使用できません。


append の基本的な使い方

appendの基本的な使い方を紹介していきます。
「リスト名．append（追加したい要素）」として作成したリストに値を付加することができます。

　リスト名．append（追加要素）　　＃構文　

例えば、次のようにして使用します。
"""

list_a = [1, 2, 3, 4]
list_a.append(5)
print(list_a)    # [1, 2, 3, 4, 5]

"""
ここでは「list_ａ＝［１，２，３，４］」というリストがあり、
「list_a.append（５）」を用いて「ｌｉｓｔ＿ａ」のリストの末尾に「５」を追加しています。
文字列でも同様の方法で追加することが可能です。


extend と insert との違いとは？

extendとinsertもappendと同様、リストに要素を追加するメソッドです。
しかし、この３つには明確な違いがありますので、それぞれ説明します。
appendは、これまで説明したように末尾に要素を追加します。
一方、extendでは末尾に別のリストやタプルを結合させ、
insertでは指定の位置に要素を追加します。
言葉だけではイメージしにくいかもしれませんので、
extendとinsertについてもコードを交えて説明していきますね。
extendメソッドの基本的な使い方は下記の通りです。
"""

list_a = [1, 2, 3]
list_a.extend([4, 5])
print(list_a)    # [1, 2, 3, 4, 5]

"""
書き方は、appendをextendに変更しただけでほとんど変わらないのが変わりますね。

文字列の場合は、下記のように各文字が１文字ずつ追加されます。
"""

list_a = [1, 2, 3]
list_a.extend('new')
print(list_a)    # [1, 2, 3, 'n', 'e', 'w']

"""
insertメソッドの基本的な使い方は下記の通りです。
"""

list_a = [1, 3, 4, 5]
list_a.insert(1, 2)    # インデックス1の要素の前に追加
print(list_a)    # [1, 2, 3, 4, 5]

"""
先頭に追加したい際は、insertの第１引数に０を指定しましょう。
"""


print("--- append の具体的な使用例 ---")


"""
appendの基本的な使い方を読んで、何となくイメージができたでしょうか。
ここからはさらに具体的な使い方について、実際にコードを交えて説明していきましょう。

数値の追加

まずは、数値の追加方法をおさらいしましょう。
"""

# 数値の追加
list_a = [1, 2, 3, 4]
# list_aに新しい要素を追加
list_a.append(5)
print(list_a)    # [1, 2, 3, 4, 5]

"""
文字列の追加

文字列を追加する場合は、下記の通りです。
"""

# 文字列の追加
list_a = ['a', 'b', 'c', 'd']
# list_aに新しい要素を追加
list_a.append('e')
print(list_a)    # ['a', 'b', 'c', 'd', 'e']


"""
数値と文字列が混在

数字と文字が混在する場合でも、特別な処理は不要です。
"""

# 数字と文字が混在
list_a = [1, 2, 3, 4]
# list_aに新しい要素を追加
list_a.append('e')
print(list_a)    # [1, 2, 3, 4, 'e']


"""
別のリストを要素として追加

「list_a」に「list_b=[6]」を追加してみましょう。
"""

list_a = [1, 2, 3, 4, 5]

list_b = [6]
list_a.append(list_b)
print(list_a)    # [1, 2, 3, 4, 5, [6]]


"""
異なる型の追加

appendでは空のリスト「list_a=[ ]」を作成して、数値・文字列を追加することも可能です。
"""

list_a = []
list_a.append('dog')
list_a.append('pochi')
list_a.append(10)
print(list_a)    # ['dog', 'pochi', 10]

"""
上記のコードでさらに「list_b＝[’cat’，’tama’，7]」を作成し、
「list_animal」に「list_a」と「list_b」を追加する方法を紹介します。
まず、下記のように「list_b」を作成します。
"""

list_b = []
list_b.append('cat')
list_b.append('tama')
list_b.append(7)
print(list_b)    # ['cat', 'tama', 7]

"""
さらに、「list_animal」を作成して、「list_a」と「list_b」を追加します。
"""

list_animal = []
list_animal.append(list_a)
list_animal.append(list_b)
print(list_animal)    # [['dog', 'pochi', 10], ['cat', 'tama', 7]]

"""
このようにanimalリストを作成することができました。


for文で長いリストを作成

for文で長いリストを作成する方法は下記の通りです。
"""

list_a = []
for x in range(7):
	list_a.append(x)

print(list_a)    # [0, 1, 2, 3, 4, 5, 6]

"""
for文で長いリストを作成する際、
「list_a.append(x)」の行をインデントするのを忘れないように気をつけましょう。
"""


print("--- Python の append は複数の要素を同時追加できない ---")


"""
appendの役割でも説明したように、Pythonのappendでは
複数の要素を同時に追加することはできません。

　１　＃ａｐｐｅｎｄメソッドの引数に同時に複数の要素を渡すことは不可
　２　ｌｉｓｔ＿ａ．ａｐｐｅｎｄ（６，’ｔｅｘｔ’）

このように複数の要素を同時に追加しようとしたらエラーを起こしてしまうので、
appendメソッドで要素を追加する際は１つずつ行いましょう。
"""


print("--- まとめ ---")


"""
今回、appendの役割や基本的な使い方、extendとinsertとの違い、
実践的な使用方法を説明してきましたがいかがでしたでしょうか。

今回の要点をまとめると以下のようになります。

    Pythonのappendは、リストの末尾に要素を追加する際に使用する
    appendは、複数の要素を同時に追加することはできない
    appendは、リスト以外には使用できない
    appendは、リストの末尾に別のリストやタプルを結合する
    insertは、指定した位置に要素を追加する

つまずかないように、しっかり頭にいれて理解を深めておきましょうね。
"""
