#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Tech Teacher Blog ---")
print("--- 【初心者向け】Pythonのwhile文の書き方がわかる！実践方法まで解説 ---")


"""
本記事ではこのような悩みを解決します。
while文は初心者がつまずきがちな文法のひとつ。
プログラムがどう動いているのかイメージしにくく、参考書を読んで「なんとなくこうかな」と思っても、
実際はちゃんと理解できていなかったことも多いですよね。
プログラミングの勉強はひとつずつ確実に理解していくことが大事です。
そこで本記事ではPythonのwhile文について初心者でもわかるように解説します。
本記事を読むことでPythonのwhile文の基礎がわかるようになり、学習を先へ進めることができますよ。
"""


print("--- while文とは ---")


"""
まずwhile文とは何なのか基本的な部分を解説します。
while文の役割や使い方、for文との違いも説明するので、while文の基礎をおさえましょう。

while文の役割

while文とは、同じ処理を繰り返し行うために使われる構文です。
プログラムを書く時に同じ処理を手で何回も記述するのは非効率的です。
たとえば、「Hello world!」と5回表示させたい場合、次のように書くのはよくありません。

print(“Hello world!”)
print(“Hello world!”)
print(“Hello world!”)
print(“Hello world!”)
print(“Hello world!”)

これではソースコードが長くなってしまい、読みにくくなってしまっていますよね。
表示内容を変更したい場合には5行すべてを書き換えないといけない手間もあります。
こうした問題を解決するのがwhile文です。
while文を使えば、たった一行のコードで「Hello World」を5回表示させることができます。
そうなれぱソースも短くなりますし、後で修正するのも楽になりますよね。
このようにwhile文は、同じ処理を繰り返し行うときに使われる構文です。

for文との違い

while文とfor文を混同している人がよくいます。
while文もfor文も「繰り返し処理を行う」点は共通していますが、まったく異なる処理になります。
while文は「条件を指定し、その条件に従う場合のみ処理を繰り返す」場合によく使われるのに対し、
for文は「回数を指定して、指定した回数だけ繰り返し処理を行う」場合によく使われます。
多くの場合、for文とwhile文のどちらを使っても同じ処理を実装できますが、
「こちらの構文を使った方がプログラムが綺麗に書ける」というのはあります。
たとえば「数字を1から10まで表示させる」など単純な出力の場合はfor文の方が向いています。
逆に複雑な処理をする場合はwhile文の方が書きやすいことが多いです。
また、後で詳しく説明しますが、「無限ループ」処理を行うときはwhile文の方が使われます。
実際の現場ではある程度ルールに基づいて使い分けをしているところが多いです。
while文とfor文にはこのような違いがあるので覚えておきましょう。

while文の基本的な使い方

ここではwhile文の基本的な使い方を解説します。

while文は次のような書式となっています。
while 条件式：
　　　 条件式が真の時に実行する文1
　　　 条件式が真の時に実行する文2
　　　 ・・・

まず条件式を書き、その条件に当てはまる場合に処理したい内容を
while以下にインデントして記述します。書き方の例としては次のようになります。
"""

num = 0
while num < 5:
	print('Hello world!')
	num = num + 1

# Hello world!
# Hello world!
# Hello world!
# Hello world!
# Hello world!

"""
これは「Hello world!」と5回表示させるプログラムです。
プログラムはこのとき、次のような流れで動いています。

    「num=0」で変数numに0を入れる
     while文に到達すると、条件式「num<5」に当てはまるか確認。numは0なので当てはまる。
    「print( “Hello world!” )」で「Hello world!」と1回表示
    「num=num+1」でnumの値に1プラスする
     while内の処理が一度終了したので、最初に戻って条件式「num<5」を確認する。
     numは1なので当てはまる。
     3から5の処理を繰り返す。numが5になると条件式「num<5」に当てはまらなくなるので、
     そこでwhileの処理が終了する
    プログラムが終了する

このようにwhile文は条件式に当てはまるなら、何度でも処理を繰り返すのです。
"""


print("--- while文の実践方法・具体例 ---")


"""
それでは、while文の実践方法を解説してきます。

ここでは以下のことを学んでいきましょう。

    break文
    continue文
    無限ループ
    else文

これらを覚えていると、while文を実践で使いこなせるようになります。


break文

break文を使うと、while内で処理を強制終了させることができます。
while文は通常、条件式に当てはまるなら永遠に処理を実行させます。
しかしbreak文を使うと処理の途中でも、ループを終了させることが可能です。
使い方の例を見ていきます。
"""

num = 0
while num < 5:
	if num == 2:
		break
	print('Hello world!')
	num = num + 1

# Hello world!
# Hello world!

"""
上記のプログラムでは、「numの値が2のとき」にbreak文を使って処理を終了させています。
そのため「Hello world!」は2回しか表示されないのです。
このようにbreak文を使うと特定条件で処理を終わらせることができます。
何か例外的なことが起こったときにループを終了させたい場合などにはbreak文が便利です。


continue文

continue文を使うと、while内で処理をスキップさせることができます。
「この場合は処理を飛ばして、後はループさせるようにしたい」
といった場合にはcontinue文が役立ちます。
使い方の例を見ていきます。
"""

num = 0
while num < 5:
	if num == 2:
		num = num + 1
		continue
	print(num)
	num = num + 1

# 0
# 1
# 3
# 4

"""
上記のプログラムでは数字を0から4まで順に表示させる途中で、
「numの値が2のとき」にcontinue文を使って処理をスキップさせていますね。
2の値のみが出力されていないことを確認してください。
このように、特定条件のみ処理を飛ばしたいときにconitnue文が役立ちます。


無限ループ

特定の条件に一致するまでずっと同じ処理を繰り返したいときには「無限ループ」が役に立ちます。
while文では「while True:」と書くことで、
処理を無限に行う「無限ループ」を実行することができます。
"""
"""
num = 0
while True:
	print('Hello world!')
	num = num + 1
"""
"""
上記の例では、「Hello world!」とずっと表示させ続けています。
さらに、break文と組み合わせることによって、
無限ループの中でも特定条件のときに処理を終了させることができます。
"""

num = 0
while True:
	if num == 2:
		break
	print('Hello world!')
	num = num + 1

# Hello world!
# Hello world!

"""
「numが2の場合」に処理を終了させることができました。
こうすることでbreak文は無限ループも終わらせることが可能です。
上記の例では無限ループを使わなくても記述することはできますが、
無限ループを使った方がソースコードをすっきり書くことができる場合もあります。
while文での無限ループのやり方も覚えておくようにしましょう。


else文

else文を使うと、while文の条件式に当てはまらない場合に処理を実行させることができます。
これを利用するば、while文のループ処理が終わった後に処理を実行させることもできます。

else文の書式は次のようになります。
while 条件式:
　　　　条件式が真の時に実行する文1
　　　　条件式が真の時に実行する文2
else:
　　　　条件式が偽の時に実行する文1
　　　　条件式が偽の時に実行する文2
　　　　・・・

while文の下にelse文を書き、
else文の中に繰り返し処理が終わった後に実行したい処理を記述します。
例を見ていきましょう。
"""

num = 0
while num < 5:
	print('Hello world!')
	num = num + 1
else:
	print('Hello world!と5回出力しました')

# Hello world!
# Hello world!
# Hello world!
# Hello world!
# Hello world!
# Hello world!と5回出力しました

"""
上記の例では、まずwhile文で「Hello world!」と5回出力しています。
すると「num」の値は5となり条件式を満たさなくなっているので、else文が実行されることになります。
最後にelse文で「Hello world!と5回出力しました」と出力しているのです。
このようにwhile文と組み合わせることで、ループ後の処理を明示することが可能です。
今の場合、else文を使わなくても、whileの下にそのまま処理を書いてもかまいません。
ただ、else文を使った方が「whileの中の処理と何かしら関連性のある処理」
ということを表すことができます。
そうすれば後からコードを見返したときに、プログラムが何をやっているのかがわかりやすくなるのです。
ソースコードをわかりやすく書けると現場で役立つので、else文も覚えておきましょう。
"""


print("--- まとめ ---")


"""
本記事ではwhile文について解説しました。
while文を使うと同じ処理を繰り返し行うことができ、ソースの記述を大幅に減らすことが可能です。
また、break文やconitnue文、else文と組み合わせることで、
より複雑なループ処理を行うこともできます。
while文は実務では頻繁に使うことになる処理の一つ。
プログラミング初心者はぜひこの機会に使い方を覚えてくださいね。
"""



print("--- Pyhooより ---")
print("--- Python while文の使い方｜ループ処理の基礎〜応用まで ---")


"""
 この記事で解決できること

    while文の基本が分かる
    while文とif文を組み合わせた条件分岐（while文〜if文）が分かる
    while文の応用的な使い方（break文）が分かる
"""


print("--- Python｜while文とは ---")


"""
while文とは、指定した条件が成立する間、同じ手順の処理を繰り返し実行する構文のことです。
for文は、指定した回数の処理が終わればループを抜けますが、
while文は処理がいつまでも完了しない（無限ループ）になる危険があります。
※無限ループの中断方法も最後に説明します。

while文は、「ある条件の間、繰り返す」処理に使うテクニックです。
"""


print("--- Python｜while文の基本 ---")


"""
while文の基本形は以下のとおりです。[C.繰り返し実行したい処理]はインデント（半角スペース×4）を空けて記述してください。
[A.カウンタ変数]=値

while [B.条件式]:

[C.繰り返し実行したい処理]

[D.カウンタ変数の更新]

    [A.カウンタ変数]に値を代入
    [B.条件式]を判定し、成立した時は[C.繰り返し実行したい処理]を実行
    [D.カウンタ変数の更新]を実行
    再び、[B.条件式]を判定し、成立した時は[C.繰り返し実行したい処理]を実行
    一方、[B.条件式]が成立しなかった時は処理を中断


Python｜while文の具体例

xの値が1からスタートし、xの値が5より小さい間はxの値を出力するコードを実行
（xの値を1つずつ増加）。
"""

x = 1
while x < 5:
	print(x)
	x = x + 1

# 1
# 2
# 3
# 4

"""

    カウンタ変数（x）に、数値（1）を代入
    条件式（x<5）が成立したか判定→成立
    xの値を出力します
    カウンタ変数（x）に、数値（x+1=2）を代入
    再び、条件式（x<5）が成立したか判定→成立
    xの値を出力します

x=5の場合

    条件式（x<5）が成立したか判定→不成立
    処理を中断
"""


print("--- Python｜while文 + if文〜else文 ---")


"""
次に条件分岐の方法を説明します。

while文+if文〜else文の基本は以下のとおりです。


[A.カウンタ変数]=数値

while [B.条件式]:

[C.繰り返し実行したい処理]

if [D.条件式]:

[E.条件式が成立した時の処理]

else:

[F.条件式が成立しなかった時の処理]

[G.カウンタ変数の更新]


    [A.カウンタ変数]に数値を代入
    [B.条件式]を判定し、成立した時は[C.繰り返し実行したい処理]を実行
    さらに[D.条件式]が成立した時、[E.条件式が成立した時の処理]を実行
    一方、[D.条件式]が成立しなかった時、[F.条件式が成立した時の処理]を実行
    [G.カウンタ変数の更新]を実行
    再び[B.条件式]を判定し、成立した時は[C.繰り返し実行したい処理]を実行
    以降、条件式が成立する間は何度でも繰り返し処理を実行します


Python｜while文 + if文〜else文

さらに複雑な条件分岐の方法を説明します。

xの値が1からスタートし、xの値が4より小さい間はxの値を出力する（xの値は1ずつ増加）。
かつ、xの値が2の時は「xの値は2です！」と出力し、それ以外の時は「xの値は2ではありません」
と出力するコードを実行。
"""

x = 1
while x < 4:
	print(x)
	if x == 2:
		print('xの値は2です！')
	else:
		print('xの値は2ではありません')
	x = x + 1

# 1
# xの値は2ではありません
# 2
# xの値は2です！
# 3
# xの値は2ではありません

"""
カウンタ変数（x）に、数値（1）を代入
条件式（x<4）が成立したか判定→成立
xの値（1）を出力します
条件式（x==2）が成立したか判定→不成立
「xの値は2ではありません」と出力します
カウンタ変数（x）に、数値（x+1）を代入
再び、条件式（x<4）が成立したか判定→成立
xの値（2）出力します
条件式（x==2）が成立したか判定→成立
「xの値は2です！」と出力します
以降、条件式が成立する間は何度でも繰り返し処理を実行します
"""


print("--- Python｜while文 + if文〜else文 + break文 ---")


"""
次に繰り返し処理を、途中で中断する方法を説明します。

while文 + if文〜else文 + break文の基本は以下の通りです。
[A.カウンタ変数]=数値

while [B.条件式]:

if [C.条件式]:

break

else:

[D.条件式が成立しなかった時の処理]

[E.カウンタ変数の更新]

    [A.カウンタ変数]に数値を代入
    [B.条件式]を判定し、成立した時は[C.条件式]に判定が移ります
    [C.条件式]が成立した時は、breakを実行
    一方、[C.条件式]が成立しなかった時、[D.条件式が成立しなかった時の処理]を実行
    [E.カウンタ変数の更新]を実行
    再び[B.条件式]を判定し、成立した時は[C.条件式]に判定が移ります
    以降、条件式が成立する間は何度でも繰り返し処理を実行します


Python｜while文 + if文〜else文 + break文の具体例


xの値が1からスタートし、xの値が10より小さい間はxの値を出力する（xの値は1ずつ増加）。
かつ、xの値が5の時は処理を中断するコードを実行。
"""

x = 1
while x < 10:
    if x == 5:
        break
    else:
        print(x)
    x = x + 1

# 1
# 2
# 3
# 4
"""

    カウンタ変数（x）に、数値（1）を代入
    条件式（x<10）が成立したか判定→成立
    条件式（x==5）が成立したか判定→不成立
    xの値（1）を出力します

x==5の場合

    カウンタ変数（x）に、数値（5）を代入
    条件式（x<10）が成立したか判定→成立
    条件式（x==5）が成立したか判定→成立
    breakが実行され、処理を中断します

"""


print("--- Python｜代入演算子について ---")


"""
カウンタ変数の更新に使用している「x=x+1」のような記述は、
効率的なコーディングに欠かせないテクニックです。

    x+=1（xの値を1増加させる）　→　x=x+1と同じ
    x-=1（xの値を1減少させる）　→　 x=x-1と同じ

"""


print("--- Python｜無限ループの中断方法 ---")


"""
条件式が常に成立するコード（カウンタ変数の更新がない等）を記述した場合、
処理が無限に実行されてしまいます（無限ループ）。
その場合は、キーボードで「Ctrl+C（mac：control+C）」を押すことで、
無限ループを中断させることができます。
"""


print("--- Python｜while文のまとめ ---")


"""
while文は、for文と同じで処理を繰り返し実行するときに使用する構文ですが、
while文は条件式が成立する間、何度でも処理が実行される点が特徴です。
ただし条件式の設定に注意しないと、無限ループになってしまう危険があります。
while文はfor文と比べてより少し複雑ですが、
便利な処理を記述できるので是非マスターしてください。
"""



print("--- フライテックより ---")
print("--- 【Python】while文を使って繰り返し処理を行う！サンプルコード付き！ ---")


"""
処理を繰り返す仕組みにwhile文(whileループ)があります。
for文もまた、繰り返し処理ですが、while文とは少し異なります。
forループは「回数を指定して」処理を繰り返すものですが、
whileループは「条件式がtrueである限り」処理を繰り返します。
「条件式がtrueを返したら」という条件で処理を繰り返す場合、
繰り返す回数は不明なのでforを使うことはできません。
一方でwhileループは指定した条件が成立する限り、処理を繰り返します。
今回はwhile文の繰り返し処理について解説します。


whileとは

先ほども言いましたが、whileループは「条件式がtrueである限り」処理を繰り返します。
例えば、条件式が「n == 1」とすれば、変数nの値が1である限り処理を繰り返し、
「n != 1」とすれば変数nの値が1でない限り処理を繰り返すようになります。


whileの書き方

while文の構文は以下のようになります。

while 条件式:
    条件式が真の時に実行する処理


whileを使ったサンプルコード

例
"""

num = 0
while num < 2:
    print('数字 = ', num)
    num = num + 1

# 数字 =  0
# 数字 =  1
"""
条件式がtrueである場合は、変数numが0と1なので0と1の場合に処理が実行されています。


whileの基本的な使い方

while文の基本的な使い方について紹介します。
処理を強制終了する(break)

breakを使用すると、while文の途中で処理を強制的に終了することができます。

例
"""

num = 0
while num < 6:
    print('num = ' + str(num))
    num += 1

    if num > 4:
        break

print('終了')

# num = 0
# num = 1
# num = 2
# num = 3
# num = 4
# 終了

"""
処理をスキップする(continue)

continueを使用すると、それ以降の処理をスキップし、ブロックの先頭に戻ります。

例
"""

num = 1

while num < 10:
    num = num + 1
    if num == 4:
        continue

    print('数字 = ' + str(num))

print('終了')

# 数字 = 2
# 数字 = 3
# 数字 = 5
# 数字 = 6
# 数字 = 7
# 数字 = 8
# 数字 = 9
# 数字 = 10
# 終了

"""
繰り返し処理終了後に処理を行う(else)

elseを使うと、while文のループが終わった後に何らかの処理を行うことができます。

例
"""

num = 1
sum = 0

while num < 10:
    print('数字 = ' + str(num))
    sum += num
    print('途中合計 = ' + str(sum))
    num += 1
else:
    print('最終合計 = ' + str(sum))

print('終了')

# 数字 = 1
# 途中合計 = 1
# 数字 = 2
# 途中合計 = 3
# 数字 = 3
# 途中合計 = 6
# 数字 = 4
# 途中合計 = 10
# 数字 = 5
# 途中合計 = 15
# 数字 = 6
# 途中合計 = 21
# 数字 = 7
# 途中合計 = 28
# 数字 = 8
# 途中合計 = 36
# 数字 = 9
# 途中合計 = 45
# 最終合計 = 45
# 終了


"""
無限ループを回避する

無限ループとは繰り返しが永久に終わらない処理のことをいいます。
無限ループはbreakを使うことで抜け出すことが可能になります。

例
"""

num = 0

while True:
    print('無限ループ中')
    num += 1

    if (num == 10):
        break

print('終了')

# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 無限ループ中
# 終了

"""
while文の応用的な使い方

ここでwhile文の応用的な使い方を見てみましょう。
多重ループを使って九九の表を作成

多重ループを使って九九の表を作成してみます。

例
"""

i = 1
j = 1

while i <= 9:
    j = 1

    while j <= 9:
        print(i * j, end=' ')

        j = j + 1

    i = i + 1
    print('\n')

# 1 2 3 4 5 6 7 8 9

# 2 4 6 8 10 12 14 16 18

# 3 6 9 12 15 18 21 24 27

# 4 8 12 16 20 24 28 32 36

# 5 10 15 20 25 30 35 40 45

# 6 12 18 24 30 36 42 48 54

# 7 14 21 28 35 42 49 56 63

# 8 16 24 32 40 48 56 64 72

# 9 18 27 36 45 54 63 72 81


"""
while not とは

whileの条件文には否定のnotを使って作成することができます。
この場合、notで否定された条件を満たすまで繰り返して処理を行います。


while notの書き方

while notの構文は以下のようになります。

while not 条件式:
    条件式が真の時に実行する処理


例えば、条件式が「n == 1」とすれば、変数nが1ではない限り処理を繰り返します。


while notを使ったサンプルコード

例
"""

num = 0

while not num > 10:
    print('数字 = ', num)
    num = num + 1

# 数字 =  0
# 数字 =  1
# 数字 =  2
# 数字 =  3
# 数字 =  4
# 数字 =  5
# 数字 =  6
# 数字 =  7
# 数字 =  8
# 数字 =  9
# 数字 =  10

"""
while文とfor文の違い

冒頭でも説明しましたが、Pythonの繰り返し処理にはfor文もあります。
for文は回数を指定して処理を繰り返します。
一方while文は、条件式がtrueである限り処理を繰り返します。
つまり、決まった回数分、ループ処理を続けるのがfor文で、条件がtrueの間、
ループ処理を続けるのがwhile文となります。
for文とwhile文で、何を基準にループ処理をしているのかが分かるようになると、
while文をfor文を区別して使用することができます。
"""
