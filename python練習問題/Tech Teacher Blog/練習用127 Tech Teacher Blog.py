#!/usr/bin/python
# -*- coding: UTF-8 -*-



print("--- Tech Teacher Blog ---")
print("--- Pythonの出力関数printの要点をつかむ！基礎〜応用まで徹底解説 ---")


"""
Pythonを学習し始めたばかりの方で、print関数についてつまずいてしまう人も少なからずいるでしょう。

「Pythonのprintの役割ってどんなのがあるの？」
「Pythonでのprintの基本的な使い方が知りたい」

このような悩みをかかえている方に、Pythonにおけるprintの役割や基本的な使い方、
具体的な使用例まで詳しく説明します。
"""


print("--- Pythonのprintについて ---")


"""
Pythonにおけるprint関数は多くの人にとってまず初めに覚える関数です。
どのようなシチュエーションにも使用できるので、便利な関数ですよ。
それでは、print関数の役割や基本的な使い方を説明していきますね。


print関数の役割
print関数の役割は、文字列や数値を画面に出力することです。
指定の文字列や数値を標準出力に出力することが可能です。
print関数はエラー出力やデバッグにもよく使われており、重要度の高い処理となっています。


Python2 と Python3 における違いとは？
Python3では「print関数」ですが、Python2では「print文」になります。
書式では、次のような違いがあります。

ｐｒｉｎｔ　値　　　＃Ｐｙｔｈｏｎ２
ｐｒｉｎｔ（値）　　＃Ｐｙｔｈｏｎ３

print文で記述したPython2のコードをPython3で実行すると
エラーを起こしてしまうので気をつけてくださいね。
またPython3のつもりがPython2で実行されていたというケースもありますので
十分注意して実行しましょう。


print関数で出力できるデータ型とは？
print関数で出力できるデータ型は「文字列」「数値」「真理値」の３種類です。
「文字列」の特徴は以下の通りです。
データ型「 str 」は string の略称で「文字列」と呼ぶ
０個以上の文字が並んで「 ’ 」で挟まれた値は文字列として扱われる
文字列の定義に使うものは「 ’ 」の他にも「 ” 」があるが、役割はほとんど変わらない
「，」で区切ると複数の項目を一度に出力することが可能
「数値」の特徴は以下の通りです。
数値として認識されるためには引数として半角数字を入力する
数値のデータ型には「 int 」と「 float 」がある
「 int 」は integer の略称で整数値
「 float 」は floating point number の略称で小数値
半角数字であっても「 ’ 」や「 ” 」で囲むと文字列と認識される
「真理値」の特徴は以下の通りです。
データ型「 bool 」は boolean の略称で「真理値」と呼ぶ
「 True 」＝真と「 Flase 」＝偽の２種類の値だけを取る
真偽は数値で表すこともでき、「 False 」は「０」、「 True 」はそれ以外の数値


print関数の基本的な使い方
print関数の基本的な書式は、以下の通りです。

ｐｒｉｎｔ（値）

「（）」内の「値」に文字列や数値など、出力したい内容を記述します。
文字列を出力したい場合、「 ’ 」または「 ” 」で囲む必要があるので頭に入れておきましょう。
"""


print("--- print関数の具体的な使用例 ---")


"""
ここからは実際のコードを交えて以下のことについて説明していきますね。

区切り文字の変更
改行しないようにする
printf 形式
文字列メソッドformat（ ）
小数点以下の桁数を指定して出力


区切り文字の変更
引数に「，」で区切って複数の文字列を指定した場合、
デフォルトでは半角スペースで区切られて出力されることになります。
スペースではなく別の区切り文字に変更する場合や、
区切り文字をなくして続けて出力したい場合には以下のように「sep＝”区切り文字”」を指定します。

print（ 値, sep＝”区切り文字” ）
sepの使い方は以下の通りです。
"""

# デフォルトでは半角スペースで区切られる
print("Apple", "Banana", "Orange")
# Apple Banana Orange

# 区切り文字を「＋」に変更
print("Apple", "Banana", "Orange", sep='+')
# Apple+Banana+Orange

# 区切り文字をなくして続けて出力
print("Apple", "Banana", "Orange", sep='')
# AppleBananaOrange


"""
改行しないようにする
デフォルトでは文字列などを出力した後に自動で改行を出力するように設定されているため、
print関数を実行すると自動的に改行されます。
最後に改行せずにprint関数を実行したい場合には、以下のように「 end＝’ ’」を指定します。

print（値, end＝’ ’）

デフォルトでは「 end ＝’￥ｎ’」となっているため、自動で改行が行われます。
ここで「￥ｎ」は改行を表すエスケープシーケンスです。
改行を行いたくない場合にはデフォルトの「￥ｎ」の代わりに
空の文字列を指定すればよいことになります。
また「 end 」を使って最後に出力する文字列を指定することが可能です。
ｅｎｄの使い方は以下の通りになります。
"""

# デフォルト設定
print('Hello')    # Hello
print('World')    # World


# 改行しないようにいする場合
print('Hello', end='')
print('World')    # HelloWorld


# 最後に指定した文字列を出力する場合
print('Hello', end='[end] \n')    # Hello[end]
print('World', end='[last]')    # World[last]


"""
ｐｒｉｎｔｆ形式について

「％ｓ」「％ｄ」のようなフォーマット指定子を使用して変数を出力する形式をprintf形式といいます。
以下のように入力するとフォーマット指定子「％ｄ」「％ｓ」などが変数で置き換えられます。

ｐｒｉｎｔ（フォーマット指定子，％変数）

変数が複数の場合、「，」で区切って「（ ）」で囲んでタプルとして指定します。
"""

s = 'Emily'
i = 23
print('Emily is %d years old' % i)    # Emily is 23 years old

print('%s is %d years old' % (s, i))    # Emily is 23 years old


"""
フォーマット指定子は以下の通りです。

％ｃ：１文字を出力
％ｄ：整数を１０進数で出力
％ｅ：実数を指定表示で出力
％ｆ：実数を出力
％ｇ：実数を最適な形式で出力
％ｌｄ：倍精度整数を１０進数で出力
％ｌｆ：倍精度実数を出力
％ｌｏ：倍精度整数を８進数で出力
％ｌｕ：符号なし倍精度整数を１０進数で出力
％ｌｘ：倍精度整数を１６進数で出力
％ｏ：整数を８進数で出力
％ｓ：文字列を出力
％ｕ：符号なし整数を１０進数で出力
％ｘ：整数を１６進数で出力


文字列メソッド format ( ) について
文字列メソッドformat () を使用すると、
文字列中の置換フィールド「｛ ｝」が引数に指定した変数に置換されます。

文字列．ｆｏｒｍａｔ（変数）
変数が複数ある場合、「，」で区切ります。
"""

s = 'Emily'
i = 23

print('Emily is {} years old'.format(i))
# Emily is 23 years old

print('{} is {} years old'.format(s, i))
# Emily is 23 years old

"""
置換フィールドにインデックスを指定すると、以下のように引数の位置に応じて値が置換されるため、
同じ値を繰り返し使用したいケースに便利です。
"""

s = 'Emily'
i = 23

print('{0} is {1} years old /{0}{0}{0}'.format(s, i))
# Emily is 23 years old /EmilyEmilyEmily

"""
置換フィールドに文字列を指定すると、以下のようにキーワード引数として指定した値で置換されます。
"""

s = 'Emily'
i = 23

print('{name} is {age} years old'.format(name=s, age=i))
# Emily is 23 years old

"""
文字列中で「｛」や「｝」をそのまま出力したい場合は、「｛｛」「｝｝」と記述します。
"""

s = 'Emily'
i = 23

print('{} is {} years old /{{abc}}'.format(s, i))
# Emily is 23 years old /{abc}

"""
ｆ文字列について

文字列の「’」の前に「ｆ」を付けた文字列のことを「ｆ文字列」といいます。
ｆ文字列を使用すると、以下のように、
文字列中の置換フィールド内に変数を直接指定することが可能です。
"""

s = 'Emily'
i = 23

print(f'{s} is {i} years old')
# Emily is 23 years old


"""
小数点以下の桁数を指定して出力

formatメソッドを呼ぶ文字列やｆ文字列の置換フィールド内に書式指定文字を指定することで、
数値の書式を指定して出力することが可能です。

「｛：書式指定文字列｝」のように記述します。
"""

number = 0.45

print('{0: 4f} is {0: .2%}'.format(number))
#  0.450000 is  45.00%

print(f'{number: .4f} is {number: .2%}')
# 0.4500 is  45.00%

"""
書式指定文字列を使えば、次のようなことができますよ。

左寄せ・中央寄せ・右寄せ
２進数・８進数・１６進数
ゼロ埋め
小数点以下の桁数指定
パーセント表示
指数表記
このように、さまざまな書式で出力することができます。
"""


print("--- まとめ ---")


"""
今回、print関数の役割や基本的な使い方、
具体的な使用例を説明してきましたがいかがでしたでしょうか。

今回の要点をまとめると以下のようになります。

Pythonにおいてprintは文字列や数値を画面に出力する
Python2 では print 文、Python3 では print 関数
print 関数の書式は「print（ 値 ）」
区切り文字の変更を行う場合は「 sep＝”区切り文字”」
改行しないようにする場合は「 end＝’ ’」
冒頭でも触れましたが print はどのようなシチュエーションにも使用できる基本となる関数の一つです。

print 関数がしっかり理解できていないと途中でつまずいてしまいますので、
今回説明したことを参考に学習してみてください。
"""
