#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- みゃふのPythonプログラミング解説---")
print("--- 定数と変数---")


"""
Pythonに限らず、全てのプログラミング言語の基礎とも言える変数。
ただ、初めてプログラミングに触れる方にとっては「そもそも変数とは？」「どうやって使うの？」
「変数を使うときの注意点は？」といった疑問があるのではないでしょうか？
そこで、ここでは変数の基礎的な使い方と、変数の有効範囲（スコープ）について解説します。
"""

print("---変数---")


"""
変数

変数とは、文字や数字を格納したり、取り出したりできる、データを入れておく「箱」のことです。
変数の基本的な使い方を見ていきましょう。
"""

apple_price = 100
Kazu = 5
total_price = apple_price * Kazu
print(str(total_price) + "円")

"""
このプログラムは「りんご5個の合計金額」を求めています。

1行目、2行目ではそれぞれ「りんごの価格」「個数」を変数apple_priceと変数kazuに入れています。
変数に値を入れることを「代入」と言い、初めて変数に代入することを「初期化」と呼びます。
また、変数を作ることを「宣言」と言います。3行目のtotal_priceでは、
りんごの価格と個数を掛け算した結果をそのまま変数total_priceに代入しています。

このように、変数は式の計算結果をそのまま代入することができるのが特徴です。
特に関数やメソッドの結果を変数に代入することはよくあるので、覚えておくと良いでしょう。
"""

list = [3, 6, 9, 8, 0]
max_num = max(list)
print(max_num)


print("---複合代入演算子---")
"""
複合代入演算子

ここでは複合代入演算子について説明します。
まずは次のコードを見てください。
"""

age = 17
age = age + 1
print(age)    # 18

"""
2行目の式に注目してください。式の左右両方に「age」があります。
まず右辺のage + 1が計算されて、それをageに再代入しています。
age + 1は18になるので、ageに18を代入し、出力しています。

プログラムでは、こういった「変数の値を更新するために、変数自身に演算を行う」ことがよくあります。
そのため、このパターンの処理を簡潔に書けるようにしてくれる演算子があります。
それが「複合代入演算子」です。
試しに先ほどの例を複合代入演算子に置き換えてみましょう。
"""

age  = 17
age += 1
print(age)     # 18

"""
結果は同じ18になります。

2行目の「+=」が複合代入演算子です。
これは「age = age + 1」と同じ意味です。
複合代入演算子には次のようなものがあります。

演算子	               例	              説明
+=	                a += b	        a = a + bと同じ
-=	                a -= b	        a = a - bと同じ
*=	                a *= b	        a = a * bと同じ
/=	                a /= b	        a = a / bと同じ
//=	               a //= b	        a = a // bと同じ
                                    (aをbで割って、その整数値を代入する)
%=	                a %= b	        a = a % bと同じ(aをbで割って、その余りを代入する)
**=	               a **= b	        a = a ** bと同じ(aをb回掛け算した値を代入する)

「+=」の複合代入演算子は、文字列を効率よく結合するのにも役立ちます。
"""

s = 'Hello'
s += 'Python'
s += "World!"
print(s)    # Hello Python World!


print('---変数の有効範囲---')
"""
変数の有効範囲

変数の有効範囲とはなんでしょうか？
実は変数は、変数を宣言した場所によって、その変数を使える場所が限定されます。
例を見てみましょう。
"""

a = 10

def test():
	a = 20

test()
print(a)    # 10

"""
「結果は20じゃないのか？」と思う方もいらっしゃると思いますが、10になりました。
処理の手順を追ってみましょう。まず1行目で変数aに10を代入しています。
次に3〜4行目でtest関数を作成します。test関数は変数aに20を代入する関数です。
このtest関数をprint()で出力する直前で呼び出します。
しかし、このとき「最初に10で初期化した変数aは値が変わらず」、結果10が出力されています。
なぜ変数aは値が20に変わらなかったのでしょうか？実は、最初に初期化した変数aと、
関数内の変数aは別物として扱われています。

これは、それぞれの変数の有効範囲が異なるからです。
関数内の変数aは、関数内でだけ使え、最初に宣言した変数aは、関数内では使えず、
お互いに影響されない場所にいます。この変数の有効範囲のことを、変数の「スコープ」と呼びます。
"""

print('---定数---')
"""
定数とは、「一度初期化したら、その後の処理で再代入できない変数」のことです。
つまり、値が固定化されている変数です。

しかし、Pythonは定数をサポートしていないので、扱えません。
慣習として、Pythonでは「全角 + アンダーバー」で名付けた変数を定数として扱います。
"""

test_value = 10    # これは通常通り変数として扱う
TEST_VALUE = 10    # これは疑似的に定数として扱う


print('---Pythonの型①（数値型や文字列型など）---')
"""
Pythonの型①（数値型や文字列型など）

プログラミング言語での「型」とは「変数に入っているデータの種類」のことを指します。
ここでは「Pythonの型って何？」「どんな型があるの？」「型の具体的な使い方は？」
といったことについて解説します。


静的型付け言語と動的型付け言語

プログラミング言語には静的型付け言語と動的型付け言語があります。
どちらも型に関する重要なキーワードですが、結論から言うと、Pythonは「動的型付け」言語です。
静的型付けと動的型付けの違いは以下になります。

静的型付け言語

静的型付け言語は変数に入れることができるデータ型をあらかじめ決めるタイプの言語です。
変数を宣言したタイミングでデータ型が決定されるので、後から別の型のデータを入れることはできません。

動的型付け言語

動的型付け言語は変数に入れるデータ型に決まりがないタイプの言語です。
例えば一度変数に数値を入れた後でも、後から文字列やリストなど、
別の型のデータを入れることができます。

型の種類

Pythonは動的型付け言語なので、変数宣言時に型を指定しません。
しかし、データの型自体がないわけではありません。
人間が型を指定しなくても、Pythonが自動的に型を判定してくれています。
Pythonで使われている主な型は以下の通りです。

型名	     型名（日本語）	      記述例	       説明
str	       文字列	      str = 
                    “Hello Python world!”	ダブルクォーテーション、
                                            またはシングルクォーテーションでくくる。
int	       整数	            num = 123	    小数点を含まない数値。
float	浮動小数点数	       num = 123.45	    小数点を含む数値。
bool	ブール（論理値）	   flag = True
                           flag = False	    True(真)とFalse(偽)の
                                            2つだけの値を扱う型。
datetime	日付	           date_time = 
                        datetime.datetime
                   (2019, 11, 29,12, 34, 56)  日付を扱うための型。
list	    リスト         	list = 
                        [“abc”, 123, True]	複数のデータを一つの変数で
                                            まとめたいときに使う型。
                                            リスト内のデータは変更可能。
                                            データを使いたい時はlist[0]
                                            のように添字を使ってアクセスする。
tuple	    タプル	        tuple = 
                        (“abc”, 123, True)	複数のデータを一つの変数で
                                            まとめたいときに使う型。
                                            タプル内のデータは変更不可。
dictionary	辞書	            dict = 
              {"Japan" : "Tokyo", "USA" : "Washington"}	
                                            複数のデータを一つの変数で
                                            まとめたいときに使う型。
                                            データを使いたい時はdict[“Japan”]
                                            のようにkeyを使ってアクセスする。
"""


print('---型を調べる---')
"""
Pythonは変数のデータ型が決まっていないので、
変数が何のデータ型かを知りたくなる場合があります。
そういった場合、値の型はtypeメソッドで調べられます。

ためしに文字列と整数の型を調べてみましょう。
"""

s = '123'    # ダブルクォーテーションでくくっているので文字列で扱われれる
i = 123    # ダブルクォーテーションでくくっていいないので整数で扱われる

print(type(s))    # <class 'str'>
print(type(i))    # <class 'int'>

"""
変数sは文字列、変数iは整数なので、それぞれstr型、int型という結果になりました。
"""


print('---型の変換---')
"""
型の変換

型の変換とは、今のデータ型から別のデータ型へ変換することです。

計算で求めた数値を「合計は12です」のように文字列と一緒に出力したい場合、
文字列と数値をそのまま文字列連結しようとすると型エラーになります。

total = 5 + 7
print ("合計は" + total + "です") #ここでエラー！

[出力結果]

TypeError: must be str, not int

エラーを回避するには、数値を文字列へ型変換する必要があります。
数値から文字列への変換はstr()を使います。

次のように使うことで、数値を文字列に変換し、エラーを回避できます。
"""

total = 5 + 7
print("合計は" + str(total) + "です")    # 合計は12です

"""
また、str()は数値だけじゃなく、他の型でも文字列に変換できます。
今度はboolの型を変換してみましょう。
"""

print("10 < 20 は" + str(10 < 20) + "です")    # 10 < 20はTrueです

"""
文字列への型変換以外にも、int()を使えば整数、float()で浮動小数点数、
bool()で論理値へ変換することができます。
"""


print('---変数の型に応じて条件分岐する---')


"""
typeメソッドを使って得た型を使って条件分岐するには、次のようにします。
"""

i = 123
if type(i) is str:
    print("文字列です")
elif type(i) is int:
    print("整数です")
else:
    print("文字列、整数意外です")

# 整数です
"""
「type() is 型名」とすることで、型ごとの条件分岐ができるようになりました。
上記の変数iには整数が入っているので、type(i) is intがTrueとなり、
「整数です」と表示されています。
"""


print("---Pythonの型②（数値型や文字列型など)---")


"""
前回のページでは型の基本（静的型付け言語と動的型付け言語の違いや型の種類など）と、
str()を使った型の変換方法を解説しました。
ここでは主に文字列の操作方法（置換、削除、分割、結合）について解説します。
"""

print('---文字列の置換 - replace()---')

"""
文字列を置換するにはreplace()を使います。replace()の書式は次の通りです。

[構文]

replace(検索文字列, 置換文字列, 個数)

replace()は検索文字列に指定した文字列を直接置換しないで、新しい文字列を返却します。
次のコードでは早口言葉を別の早口言葉に変更しています。
"""

str = '赤パジャマ青パジャマ黄パジャマ'
modified_str = str.replace('パジャマ', 'まき紙')
print(modified_str)    # 赤まき紙青まき紙黄まき紙

"""
パジャマをまき紙に変更しました。
3つ目の引数は置換する個数を指定しますが、
何も指定しない場合は全ての文字列が置換されます。
個数を指定するパターンも見てみましょう。
"""

str = 'Herro Python World!'    # Herro
modified_str = str.replace('r', 'l', 2)
print(modified_str)     # Hello Python World!

"""
今回は置換する個数を2つに指定しているので、
Herroのrはlに置き換えられましたが、World!のrは置き換えられていません。
"""


print('---replace()でカンマ区切り文字列の先頭のカンマを取り除く---')

"""
csvファイルへの書き込みをする場合に、
ループしながらカンマ区切りの文字列を作ることがありますが、
先頭のカンマが御用ではないことがあります。
このような場合もreplace()は便利です。
次のようにすることで、先頭のカンマを取り除くことができます。
"""

list = ['val1', 'val2', 'val3']
csv_line = ''
for val in list:
    csv_line += ','
    csv_line += val

print(csv_line)    # 先頭のカンマを除きたい
print(csv_line.replace(',', '', 1))    # 先頭から一つ目のカンマだけ取り除く

# ,val1,val2,val3
# val1,val2,val3

"""
replace()で1つ目のカンマだけ空文字に置き換えることで、
求めていたcsvの行を作ることができました。
"""


print('---不必要な文字を削除 - strip()---')


"""
文字列の前後にある空白や改行コードを取り除きたい場合はstrip()を使います。

[構文]

strip(除去する文字)

除去する文字を指定することで、例えばカンマやピリオドを除去することも可能です。
次のコードではstrip()を使って空白や改行コード、ピリオドを除去しています。
"""

str = ' Hello\nWorld \n'
print(str.strip())
str = 'Now Loading...'
print(str.strip('.'))

# Hello
# World
# Now Loading

"""
Hello Worldの文字列は左右に空白と、最後に改行コードが含まれていましたが、
strip()を通すことで間の改行以外は全て除去されました。
Now Loading...の右側のピリオドが除去されているのは、
strip()の除去する文字にピリオドを指定しているためです。
また、strip()の仲間にlstrip()とrstrip()という関数がいます。
それぞれ左側のみ、右側のみ文字を取り除きたい場合に便利です。
"""

str = '__Hello__'
print(str.lstrip('_'))    # Hello__
print(str.rstrip('_'))    # __Hello


print('---文字列の分割 - split()---')


"""
文字列の分割 - split()

文字列をある文字列（セパレータ文字列）で分割するにはsplit()を使います。

split(セパレータ文字列, 最大分割数)

split()はcsvファイルの行を分割する場合などに使われます。
次のコードはsplit()でカンマ区切りの文字列を分割しています。
"""

str = 'val1,val2,val3'
vals = str.split(',')
print(vals)    # ['val1', 'val2', 'val3']

"""
split()は分割した文字列のリストを返却します。
今回はカンマを指定しましたが、文字列であればどんなものでも指定できます。
"""

str = 'なまむぎなまごめなまたまご'
print(str.split('なま'))    # ['', 'むぎ', 'ごめ', 'たまご']


print('---リストの結合 - join()---')


"""
今度はリストの文字列を一つの文字列に結合させてみましょう。
リストを結合するにはjoin()を使います。

[構文]

join(リストやタプルなど)

実際に結合してみましょう。
次のコードではカンマ区切りで文字列を結合しています。
"""

list = ['val1', 'val2', 'val3']
print(','.join(list))    # val1,val2,val3

"""
join()はセパレータ文字列.join()という使い方をします。
上のコードではカンマをセパレータとしたいので、’,’.join()という書き方をしています。

なお、join()を使う場合はリスト内の要素が全て文字列である必要があります。
文字列以外を含んでいる場合はTypeErrorになります。

list = ['val1', 2, 'val3']
print(','.join(list))

[出力結果]

TypeError: sequence item 1: expected str instance, int found

この場合は全ての要素を文字列に変換しましょう。
リスト内の要素を文字列にするにはmap()が便利です。
map()は2つ目の引数に指定したリストの全要素に対し
て、1つ目に指定した関数（文字列で指定する）を適用する関数です。

実際のコードが以下です。
"""
"""
list = [10, True, 'へび']
str_list = map(str, (list))    # リストの全ての要素をstr()で文字列に変換する
print(','.join(str_list))
"""

print('---文字列に値を差し込む - format()---')


"""
計算結果などを単純にprint()するだけでなく、
計算結果の説明を加えた文字列として出力したい場合は多いかと思います。
そういった場合に便利なのがformat()です。

最も基本的な使い方は{}を文字列内に入れて、
format()の引数に{}と置き換えたい内容を記述する方法です。
"""

str = '1+2の答えは{}です。'.format(1 + 2)
print(str)    # 1+2の答えは3です。

"""
{}と書かれた箇所にformat()の引数の結果を差し込んで出力しています。
差し込む内容を変えることで一つのテンプレート文字列で複数のパターンを作成できます。
"""

str = '好きな食べ物は{}です'
foods = ['パンケーキ', 'ワッフル', '梅干し']
for food in foods:
    print(str.format(food))

# 好きな食べ物はパンケーキです
# 好きな食べ物はワッフルです
# 好きな食べ物は梅干しです


print('---差し込む位置を指定する---')


"""
{}の中にインデックス番号を振ることで、差し込む位置を指定することができます。
"""

str = '好きな食べ物は{0}と{1}と{2}です'
favo_food = str.format('パンケーキ', 'ワッフル', '梅干し')
print(favo_food)    # 好きな食べ物はパンケーキとワッフルと梅干しです

"""
文字列内で設定したインデックス番号と、
format()で指定した引数の順番が対応しているのが分かります。
"""


print('---辞書を使って差し込む位置を指定する---')


"""
format()の引数に辞書を指定して差し替える方法もあります。
"""

dic = {'name': '佐藤', 'total_score': '491'}
result = '{0[name]}さんの合計点は{0[total_score]}点です。'
print(result.format(dic))    # 佐藤さんの合計点は491点です。

"""
{0[key]}と指定することで、辞書のキーと対応付けて要素を差し込むことができます。
"""


print('---エスケープシーケンス---')


"""
最後にエスケープシーケンスについて解説します。
エスケープシーケンスとは入力できない文字や見えない文字を入力できるようにするための処置です。
例えば改行文字や、「’」の文字列内の「’」を出力したい場合で用いられます。
実際にエスケープシーケンスを使うと次のようなことができます。
"""

print("He\'s well at cat playing")    # He's well at cat playing

"""
エスケープシーケンスはWindowsでは「¥」、Macでは「\」を使います(上のコードはWindowsの場合)。
「‘’」で囲われた文字列内で「’」を使った文字列を格納したい場合、
「’」の前に「¥」を入れることで出力できました。
よく使われるエスケープシーケンスのパターンは次の5つです。

エスケープシーケンス      意味
¥¥              バックスラッシュ (¥)
¥'              シングルクォーテーション (')
¥"              ダブルクォーテーション(")
¥n                  改行
¥t                  タブ

例えばtsvファイル(データがタブで区切られたファイル)を作成したい場合は
¥tと¥nを使って次のように表現できます。
"""

print('val1\tval2\tval3\nval4\tval5\tval6')


"""
エスケープシーケンスを使うと文字列が見づらくなりがちなので、
エディタの配色などを利用して分かりやすくすると良いと思います。
"""
