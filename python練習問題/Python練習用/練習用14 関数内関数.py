#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("---関数内関数　Code for Python---")


"""
関数内関数

関数内関数について学んでいきましょう。

関数内関数とは、その名の通り関数の中に関数を持つことです。
関数内関数の具体例

具体的なコードで理解していきましょう。
"""
def outer(a):
	def inner(b):
		print(b * 5)
		return
	return inner(a)
outer(5)      # 25

"""
(1)　1行目でouter関数を定義しています。この関数は引数aを取ります。

(2)　2行目で、outer関数の中にinner関数を定義しています。この関数は引数bを取ります。

(3)　3行目で、inner関数は引数bを5倍した数字を出力します。

(4)　5行目で、outer関数は戻り値としてinner関数を実行したものを返します。

ここでのポイントは5行目です。関数を戻り値とするというのはイメージが湧きづらいですが、
やっていることはinner関数の実行結果を返しているだけです。

今回の場合、inner関数を返す時に、aを引数としていますが、このaは6行目でouter関数を実行した時の引数5です。

つまり、5行目はinnner(5)の結果が戻り値になります。

inner(5)を実行すると、5 * 5 = 25を集力する命令がありますので、25が出力されるのです。
"""


print("---【Python】関数内関数の使い方【入門第51回】---")


"""
今回はPythonで関数内関数を使う方法を解説していきたいと思います。
関数内関数とは、じつは私の造語です。
これは、関数の中に書かれている関数のことを指します。
関数内関数は、関数内でちょっとしたツールを書きたい時などに重宝します。

この記事では具体的には↓を見ていきます。

    関数内関数の書き方

    関数内関数の使い道

関数内関数の書き方

関数内関数なんて漢字がやたら並んでいますが、その内容は簡単です。
それは関数は、関数の中にも作ることができるということです。

たとえば関数は↓のように書きます。 
"""

def love():
	print("愛と")

love()

"""
↑のコードの実行結果は「愛と」になります。
この関数loveの中にさらに関数を書くとたとえば↓のようになります。 
"""

def love():
	print("愛と")

	def peace():
		print("平和を！")

love()

"""
↑の関数peaceは関数loveの中に書かれています。
このpeaceはloveの中から呼ぶことができます。
たとえば↓のようにです。
"""

def love():
	print("愛と")

	def peace():
		print("平和を！")

	peace()    # ここで呼んでる

love()

"""
↑のコードの実行結果は↓のようになります。

愛と
平和を！

まず関数loveが呼び出されます。
そしてprint('愛を')が実行されて、関数peaceが定義されます。
そのあとにloveの中でpeaceが呼び出されprint('平和を！')が実行されます。

関数peaceは関数loveの中以外では呼び出すことが出来ません。
たとえば↓のようにpeaceを呼び出そうとすると、 
"""
"""
def love():
	def peace():
		print("平和を！")

peace()

↓のようなエラーになります。

Traceback (most recent call last):
  File ".\sample.py", line 5, in <module>
    peace()
NameError: name 'peace' is not defined

「NameError: name 'peace' is not defined」は日本語にすると「名前エラー: 'peace'は未定義です」
という意味になります。
未定義、つまり「作られていないよ」という意味ですね。
作られていない変数や関数にアクセスするとこのようなエラーになります。 
"""


"""
関数内関数の使い道

この関数内関数は、なかなか便利な機能です。
関数で込み入った処理を書いていて、なにか便利なツールが欲しいな～という時にこの関数内関数が使えます。
たとえば↓のような関数があるとします。 
"""
def sum_of_list(lst):
	sm = 0
	for el in lst:
		sm += el
	return sm

result = sum_of_list([1, 2, 3])
print(result)    # 6
"""
関数sum_of_listはリストの要素の値の合計を計算する関数です。
↑のコードの実行結果は↓のようになります。

6

このsum_of_listは、リストの要素にアクセスしていますが、リストの要素が数値とは限りません。
要素が加算できるオブジェクトかどうか判定したほうがよさそうです。
そこで、関数内関数を使うと、↓のように書くことができます。 
"""

def sum_of_list(lst):
	def safe_add(x):
		if not isinstance(x, (int, float)):
			return 0
		return x

	sm = 0
	for el in lst:
		sm += safe_add(el)
	return sm

result = sum_of_list([1, 2, None, 3.5, '(^_^)'])
print(result)

"""
safe_addという関数内関数を書きました。
これは引数xがintかfloatでないなら0を返す関数です。
そしてfor文の中でこのsafe_addを使って合計値を計算しています。
↑のコードの実行結果は↓のようになります。

6.5

for文の中で要素がintかfloatかを判定するコードを書くと↓のようになります。 
"""

def sum_of_list(lst):
	sm = 0
	for el in lst:
		if isinstance(el, (int, float)):
			sm += el
		return sm

result = sum_of_list([1, 2, None, 3.5, '(^_^)'])
print(result)

"""
注目してほしいのはfor文の中のインデントの深さです。
関数内関数を使った場合は、使っていない場合に比べてインデントの深さが1段浅くなっているのがわかります。
一般的に、インデントは深くなればなるほどコードの可読性が下がります。

そういった意味では前者の関数内関数を使ったコードのほうが読みやすいと言うべきなのですが、
まぁ正直このケースは好みの問題と言えそうです。

おい

ここまで小規模の関数では↑のような結果になりがちですが、これが少し長い関数になると効果が全く違ってきます。
特に関数内関数を何度も使用するようなケースだと、確実に関数内関数を書いたほうが良いと言えます。
おわりに

関数内関数はクロージャ―の理解に不可欠な概念です。
そして実際に便利な機能でもあります。
ちょっとしたツールを書きたくなったら関数内関数の存在を思い出してみましょう。
もっとも、その場合も普通の関数として書くべきか、それとも関数内関数として書くべきかどうかを、
ちゃんと一考したほうがいいでしょう。 
"""


print("---Pythonで関数内で関数呼び出しを行う方法【初心者向け】---")


"""
関数の呼び出しとは
関数は一連の処理をまとめたものです。
Pythonには組み込み関数とユーザ定義関数があります。
いずれの関数も以下の形式(funcは関数名)で呼び出せます。

func()

かっこ内に引数をとれる関数もあります。
"""

"""
関数内で関数呼び出しを行う方法(ネスト構造の関数における呼び出し)
Pythonでは関数内で関数を定義できます。
普通に関数を定義する場合と同様に、defキーワードを用います。
def outer_function():
    # 外側の関数の定義

    def inner_function():
        # 内側の関数の定義

    inner_function() # これはOK

inner_function() # これはNG

上の例のように、外側の関数内から内側の関数を呼び出せます。
一方で、スコープ外のため外側の関数外から内側の関数を呼び出せません(内側の関数は隠蔽されています)。
"""


"""
実際に書いてみよう
サンプルコード
"""

def make_adder():
	print("加算関数を作成します")
	def add(x, y):
		z = x + y
		print('%d + %d = %d' % (x, y, z))
		return x + y
	return add


a = make_adder()
ans = a(1, 2)
print(ans)

"""
実行結果

加算関数を作成します
1 + 2 = 3
3

解説

1行目で外側の関数make_adderを宣言します。

3行目で内側の関数addを宣言します。
addは引数2つの和を返す関数です。

7行目がmake_adder関数の返り値で、add関数を関数オブジェクトとして返します。

9行目でmake_adder関数を呼び出し、戻り値を変数aに割り当てます。

10行目で変数a(関数オブジェクト)により、add関数を呼び出します。
"""
