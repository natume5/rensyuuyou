#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Tech Teacher Blog ---")
print("--- Pythonのrange関数がわかる！Python2との違いまで解説 ---")


"""
分かりやすくコードを記述できることで人気のＰｙｔｈｏｎ。
ディープラーニングや機械学習でも注目されていますね。
そんなＰｙｔｈｏｎですが、現在はインターネット上で学習できるサイトも増えているので、
独学で学習している人もいるでしょう。
そうした学習段階で分かりにくいとされるのがｒａｎｇｅ関数です。
この記事ではｒａｎｇｅ関数の役割や使い方を解説していくので、
つまずいている方は参考にしてみてくださいね。
"""


print("--- range関数の役割・使い方 ---")


"""
最初に、ｒａｎｇｅ関数の役割や基本的な使い方について説明します。
プログラミングでは基本を押さえることが大事なので、
ここでｒａｎｇｅ関数の役割や使い方をマスターしておきましょう。


for文について

range関数の説明に入る前に、for文について簡単に解説します。
for文は繰り返し処理を行う構文ですが、
range関数と組み合わせて使うことで繰り返しの回数を決めることができます。
そのため、range関数を理解するためにはfor文の理解が必要不可欠。
まずはfor文の書き方の基本を理解しましょう。
次の構文がfor文を実行するコードの基本形です。

ｆｏｒ　変数　ｉｎ　オブジェクト：
　　　実行する処理

通常の変数と同様、for文の「変数」には「Ａｂｃ」や「num_９６１」
など大文字・小文字のアルファベット、数字、アンダースコアを使用することができます。
「オブジェクト」には基本的には繰り返し回数を指定するものが入ります。
今回説明するrange関数はオブジェクトの部分にあたる関数です。
「実行する処理」には文字列を出力する「print」などを記述します。


ｒａｎｇｅ関数の役割

range関数はfor文と組み合わせて使われることが多い関数です。
for文は繰り返し処理を行う構文でしたが、
range関数によってその繰り返しの回数を決めることができます。
後ほど、実際のコードを記述しながらrange関数の使い方を説明しますが、
ここではrange関数は繰り返し回数を決める関数と覚えておいてくださいね。
"""


print("--- Pythonの配列の使い方・具体例 ---")


"""
それではPythonの配列の具体的な使い方を解説していきます。
配列の初期化方法から様々な操作方法までをまとめてあります。
配列に関する基本的機能はひと通り網羅したので、ぜひ参考にしてくださいね。


range関数の使い方

それでは、実際にコードを使用して解説していきます。
今回はrange関数を使用して範囲を指定し、
for文で繰り返し数字を出力させるプログラムを書きましょう。
"""

for i in range(7):
	print(i)
# 0
# 1
# 2
# 3 
# 4
# 5
# 6

"""
for文で「range（ｎ）」とすると、０からｎ－１までの数値が順番に変数に代入されます。
上記のプログラムでは「range（７）」としたので、
変数「ｉ」に０から６までの値が順番に代入されました。
プログラムの世界では０から数値が始まることに注意してください。
このように、range関数は繰り返しの回数を決める時に使う場合が多いです。
"""


print("--- range関数の具体的な使い方 ---")


"""
次に、コードを見ながらrange関数の具体的な使い方を解説していきます。
Python３とPython２でのrange関数の違いも解説するので、ぜひ参考にしてくださいね。


連続した数値を出力

まずは、for文と組み合わせる基本的な使い方を紹介します。
range関数を使ったfor文で連続した数値を出力させるには、以下のようなコードを書きます。
"""

for i in range(10):
	print(i)

# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9

"""
先ほどと同じく、０から始まる数値が１０個表示されます。
ここで大事なポイントは、出力される一連の数値は０から始まることですね。


start・stop・stepについて

上の例では、range関の引数は１つだけでしたが、
range関数は複数の引数を取ることができます。
"""

for i in range(3, 6):
	print(i)

# 3
# 4
# 5

"""
「range（start, stop）」とすると、startからstop -１までの数値が順番に生成されます。
上の例では「range（３，６）」としたため、３から５までが出力されました。
次にrange関数に引数を３つ渡した場合のコードを紹介します。
"""

for i in range(0, 8, 2):
	print(i)

# 0
# 2
# 4
# 6

"""
「range（start, stop, step）」とすると、
startからstop – 1までの数値がstepずつ加算されながら生成されます。
上の例では「range（０，８，２）」としたため。０から７まで＋２されながら出力されました。


逆算で数値を出力

先ほどまで紹介したプログラムでは０，１，２，…と数値が昇順になっていましたが、
逆順で出力することもできます。
"""

for i in range(10, 5, -1):
	print(i)

# 10
# 9
# 8
# 7
# 6

"""
このように第三引数「ｓｔｅｐ」を負の数にすることで逆順で数値を出力できます。
上のコードだと１０から６までの数値を－１ずつ表示できていますね。
昇順の場合と同じように、例えばstepの数値を－２とすると２個ずつ減少していきます。
"""

for i in range(0, -5, -2):
	print(i)

# 0
# -2
# -4

"""
小数を扱う方法

range関数で少数を扱いたいというときもあるでしょう。
range関数はint型の整数にしか対応していないので、
０．１のように小数をそのまま入力するとエラーになります。
このようなエラーを避けるためには、コードを少し変更する必要があります。
"""

for i in range(8):
	print(i * 1/10)

# 0.0
# 0.1
# 0.2
# 0.3
# 0.4
# 0.5
# 0.6
# 0.7

"""
上記のコードでは変数に１／１０つまり0. 1を掛けた数を出力しています。
このように、range関数には小数を入れることができませんが、
変数を計算する形を取ることで解決できます。
"""


print("--- continueとbreakについて ---")


"""
for文を学んでいると同時に出てくるのが「continue」と「break」。
range関数と組み合わせることで応用ができるので、それぞれ紹介します。

continueについて

continue文は指定した処理をスキップさせることができます。
以下がcontinue文を使ったコードサンプルです。
"""

for i in range(5):
	if i == 3:
		continue
	print(i)

# 0
# 1
# 2
# 4

"""
本来なら「range（５）」としているため、０から４までの数値が出てくるはずです。
しかし変数「ｉ」の値が３のときにcontinue文を使っているため、
ｉが３の場合には処理がスキップされて、３は出力されないことになります。


breakについて

break文は繰り返し処理を終了させる方法として使われます。
"""

for i in range(5):
	if i == 3:
		break
	print(i)

# 0
# 1
# 2

"""
やはり「range（５）」としているため０から４までの数値が出てくるはずですが、
変数「ｉ」の値が３のときにbreak文を実行しているので、ｉが３のところで処理が終わります。
実行した処理結果のように、break文を使うと好きな所で処理を中断することができます。
このように、同じ処理を何度も繰り返して行われる場合において、break文が使われます。
"""


print("--- Python３とPython２でのrange関数の違い ---")


"""
スマホアプリやゲームソフトなど、様々なところで使われているプログラミング言語。
電化製品や車と同じようにプログラミング言語自身も日々進歩しており、
Pythonも少しずつ変更されています。
記事執筆時点でのPythonの最新バージョンは３．８．２。
このようなバージョン３．ｘ．ｘのPythonを一般に「Python３」と呼びます。
バージョン２．ｘ．ｘの「Python２」もまだ使われていますが、
Python２とPython３の間には互換性がありません。
つまり、Python２で使用可能な構文が一部Python３では使用できず、
またPython３で使用できるがPython２では使用できない構文もあるのです。
今回説明したrange関数も互換性のない構文の１つです。
Python３の環境でPython２のコードを使用するとエラーとなるので、
それぞれのバージョンにおけるrange関数について解説します。


Python２のrange関数について

Python２では繰り返し回数を決める関数は２種類あります。
range関数とxrange関数です。range関数はリストを作るのに対し、
xrange関数はオブジェクトを返す関数になります。
少し分かりにくいので、簡単に説明しますね。
range関数ではすべての数値が入ったリストを作ってループ処理をするため、メモリに負担がかかります。
一方、xrange関数は必要な個数のみ数値を作成・処理するので、
メモリ使用量を減らすことができます。
そのため、Python２で繰り返し処理を行う回数が多いときにはxrange関数を使用します。
繰り返し回数が少ないときはどちらを使用しても大きな違いはありませんが、
xrange関数の方がrange関数より早く処理できるため、
Python２の環境ではxrange関数を使用する人が多いです。


Python３のrange関数について

Python３ではxrange関数はrange関数にまとめられました。
今回紹介したrange関数はPython３で使用した場合の説明なので、
今回の記事をそのまま参考にしてもらえば問題ありません。
今後プログラミング学習で分からなくなったとき、
インターネットでPythonのコードを調べる場合には
Python３とPython２のどちらを使用している環境なのかをよく確認してくださいね。
"""


print("--- まとめ ---")


"""
range関数はfor文と一緒に使われることが多い関数です。
for文はPythonでコードを書くなら覚えておかなければならない構文の１つなので、
for文を学習するときにrange関数も一緒に覚えておきましょう。
range関数の注意点としてPython３とPython２では互換性がないことが挙げられます。
同じ関数でも意味が違うので、学習するときにはどちらを使用しているか確認しておきましょう。
"""
