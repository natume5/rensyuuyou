#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座 ---")
print("--- Python応用編 ---")
print("--- pandas入門 ピボットテーブル ---")


"""
クロス集計に欠かせないのがピボットテーブルですが、
pandasのピボットテーブルは合計、平均以外にも複雑な計算ができます。
ですが、集計方法を指定する際にラムダ式もしくは関数オブジェクトを使うため、
初見だと少し戸惑うかもしれません。
"""


print("--- pivot_tableメソッド ---")


"""
DataFrameのpivot_tableメソッドでピボットテーブルを生成することができます。
まずはサンプルから見てください。
カテゴリーとタグがつけられたデータに
何らかの値が付与されているデータの合計を集計してみます。
"""

import pandas as pd

df = pd.DataFrame([['cate1', 'tag1', 4], ['cate2', 'tag1', 10],
	['cate1', 'tag2', 5], ['cate3', 'tag3', 5], ['cate2', 'tag3', 5]],
	columns=['category', 'tag', 'value'])

print(df)

# 合計をクロス集計する
print(df.pivot_table(index=['category'],
                     columns=['tag'], values='value',
                     fill_value=0, aggfunc=lambda x: sum(x)))

"""
  category   tag  value
0    cate1  tag1      4
1    cate2  tag1     10
2    cate1  tag2      5
3    cate3  tag3      5
4    cate2  tag3      5

tag       tag1  tag2  tag3
category
cate1        4     5     0
cate2       10     0     0
cate3        0     0     5

何をしているのかはなんとなく解ると思います。
pivot_tableで指定する引数は以下の通りです。

    index：縦の集計項目を指定します。複数指定することができます。
    columns：横の集計項目を指定します。複数指定することができます。
    values：集計対象の値の項目を指定します。
    fill_value：NaNを何で埋めるかです。サンプルでは0埋めしています。
    aggfunc：集計関数を指定します。

さて、最後のaggfuncが少しわかりづらいですね。
ここにシーケンスに対して処理を行うラムダ式か関数オブジェクトを指定します。

例えば、個数、平均、標準偏差を集計する場合、以下のように記述します。
（データが少し適当すぎましたね（汗）適宜数字をいじって試してみてください。）
"""

import numpy as np

# 個数
print(df.pivot_table(index=['category'], columns=['tag'],
	values='value', fill_value=0, aggfunc=lambda x: len(x)))

# 平均
print(df.pivot_table(index=['category'], columns=['tag'],
	values='value', fill_value=0, aggfunc=lambda x: np.average(x)))

# 標準偏差
print(df.pivot_table(index=['category'], columns=['tag'],
	values='value', fill_value=0, aggfunc=lambda x: np.std(x)))

"""
tag       tag1  tag2  tag3
category
cate1        1     1     0
cate2        1     0     1
cate3        0     0     1

tag       tag1  tag2  tag3
category
cate1        4     5     0
cate2       10     0     5
cate3        0     0     5

tag       tag1  tag2  tag3
category
cate1        0     0     0
cate2        0     0     0
cate3        0     0     0

このaggfuncをカスタマイズすると、複雑な集計が可能となりますが、
最初は難しく感じますね。
"""


print("--- キノブログより ---")
print("--- Pandas入門講座｜10.データ集計（pivot_table）の方法 ---")


"""
こんにちは。キノコードです。
Excelでよく使われるピボットテーブルですが、Pythonのpandasでもできます。
Pandasでのピボットテーブル は、集計方法をカスタマイズすることが可能です。
そのため、その会社独自の集計方法や、特殊な集計をすることができます。
データ集計、データ分析でよく使われるピボットテーブルを
この動画でぜひマスターをしましょう。
読み込む前の準備として概要欄に記載したキノコードのサイトに
Excelファイルを用意しています。
それをダウンロードして、
学習用のJupyter Labを保存しているフォルダにに保存してください。
それではパソコン画面に切り替えてレッスンを進めていきましょう。
"""


print("--- Pandasのインポート ---")


import pandas as pd

"""
まず、Pandasをインポートする記述を書きます。
「as」を使ってPandasを「pd」という名前で使えるようにしましょう。
実行します。
"""


print("--- 表示する列数・行数を変更 ---")


pd.options.display.max_rows = 10
pd.options.display.max_columns = None

"""
表示する列数・行数を変更をします。
pd.options.displayで変更をしてみましょう。
pd.options.display.max_rowに10を代入します。
これで表示する行数を10行に変更することができます。
次に、表示する列数の変更をします。
max_columnsと書いて、Noneを代入します。実行します。
これで表示する列数・行数を変更ができました。
"""


print("--- データフレームの読み込み ---")


df = pd.read_excel('sample.xlsx', sheet_name='実績管理表')
print(df)

"""
続いてレッスンで使うデータを説明します。
前回と同じく、Excelデータを使います。
このデータはあるアパレル会社の販売データになります。
社員ごとに何をいくら売り上げたのかがわかります。
このExcelの中の実績管理表というシートを使います。
エクセルを読み取るにはread_excelメソッドを使います。
このメソッドは、レッスン6で説明しています。
エクセルのシートを指定して読み取りましょう。
sheet_nameという引数に実績管理表を渡します。
実行してみましょう。
読み取れました。
"""


print("--- ピボットテーブルとは ---")


"""
pivot_tableのコードを書いていく前に、まずピボットテーブルとはなんでしょうか？
ピボットテーブルは、簡単にいってしまうとクロス集計表です。
クロス集計表とは、2つのカテゴリのデータを同時に集計したものです。
例えば、これは売上管理表の「氏名」と「商品分類」のカテゴリをもとに、
売上を合計したものです。
確かに、2つのカテゴリのデータを同時に集計したものですよね。
クロス集計表のことをエクセルやPandasではピボットテーブルといっています。
ピボットとは軸という意味で、テーブルは表という意味です。
氏名や性別、商品分類、商品名などいろいろな軸を変えて、
表にすることができるのでピボットテーブルといいます。
ピボットテーブルの便利なところはどんなところでしょうか？
例えば、前回のレッスンのgroupbyでは、
氏名の列でグループ化をして合計や平均の集計ができます。
つまり、縦方向にデータを集計していました。
ピボットテーブルは、縦方向に加えて、
横方向にも項目を追加して集計することができます。
つまり、2つのカテゴリのデータを一度にみることができ、
それぞれのデータの違いが明確になります。
ピボットテーブル 、つまり、クロス集計は、
データ分析ではシンプルだけど非常にわかりやすい分析手法です。
Pythonでのやり方をぜひマスターしてください。
それでは早速ソースコードをみていきましょう。
"""


print("--- ピボットテーブルの書き方 ---")


df_pivot = df.pivot_table(index='氏名', columns='商品分類',
  values='売上金額', aggfunc='sum')
print(df_pivot)

"""
商品分類       アウター    トップス    ボトムス
氏名
上瀬 由和    636000  296000  416000
井上 真     560000  200000  176000
宮瀬 尚紀    464000  340000  883000
河野 利香    918000  424000  458000
石崎 和香菜  1022000  564000  883000
西尾 謙     786000  292000  361000

それでは、氏名と商品分類で売上金額の合計を算出してみましょう。
dfドット、pivot_table丸括弧。
引数indexに氏名、coluumnsに商品分類、
valuesに集計するデータの売上金額を指定します。
そしてaggfuncという引数が集計方法です。sumを渡して合計を算出します。
売上の集計であれば、valuesに売上金額を記述し、
例えば、数量の集計であれば、valuesに数量。
単価であればvaluesに単価を記述します。
そしてaggfuncという引数が集計方法です。
sumを渡して合計を算出します。
実行します。
クロス集計表、ピボットテーブルができあがりました。
"""


print("--- 小数点以下を省略 ---")


df_pivot = df.pivot_table(index='氏名', values='売上金額',
  aggfunc='sum')
print(df_pivot)

"""
           売上金額
氏名
上瀬 由和   1348000
井上 真     936000
宮瀬 尚紀   1687000
河野 利香   1800000
石崎 和香菜  2469000
西尾 謙    1439000

ちなみに、columnsを設定せずにindexだけ設定すれば
groupbyのような使い方ができます。
実行しましょう。
groupbyのような使い方ができますね。
"""


print("--- 平均算出 ---")


df_pivot = df.pivot_table(index='氏名', values='売上金額', aggfunc='mean')
print(df_pivot)

"""
                売上金額
氏名
上瀬 由和   49925.925926
井上 真    39000.000000
宮瀬 尚紀   43256.410256
河野 利香   43902.439024
石崎 和香菜  41847.457627
西尾 謙    42323.529412

次に平均を算出してみましょう。
引数aggfuncにmeanを渡します。実行します。平均を算出できました。
"""

df_pivot = df.pivot_table(index='氏名', columns='商品分類', values='売上金額')
print(df_pivot)

"""
商品分類             アウター          トップス          ボトムス
氏名
上瀬 由和   106000.000000  42285.714286  29714.285714
井上 真     70000.000000  25000.000000  22000.000000
宮瀬 尚紀    77333.333333  42500.000000  35320.000000
河野 利香    76500.000000  35333.333333  26941.176471
石崎 和香菜   63875.000000  37600.000000  31535.714286
西尾 謙     78600.000000  26545.454545  27769.230769

ちなみに、デフォルトはmeanになっています。
したがって、何も入力しない場合は平均が算出されます。
確認をしてみましょう。実行します。
平均が算出されました。
"""


print("--- 小数点以下を省略 ---")


df_pivot = df.pivot_table(index='氏名', columns='商品分類', values='売上金額')
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類       アウター    トップス    ボトムス
氏名
上瀬 由和   106,000  42,286  29,714
井上 真     70,000  25,000  22,000
宮瀬 尚紀    77,333  42,500  35,320
河野 利香    76,500  35,333  26,941
石崎 和香菜   63,875  37,600  31,536
西尾 謙     78,600  26,545  27,769

ただし、このデータは、小数点以下があってみにくいです。
前回のgroupbyのレッスンでも説明しましたが、
こういう場合は桁区切りを使用しましょう。
applymapとformatを使います。
applymapについては、このPandas入門コースで説明し、
format関数についてはPython入門コースでじっくり説明する予定です。
チャンネル登録をしてお待ち頂けましたら幸いです。
実行します。
みやすくなりましたね。
"""


print("--- 複数データの集計 ---")


df_pivot = df.pivot_table(index='氏名', columns='商品分類', values=['単価', '数量', '売上金額'], aggfunc='mean')
print(df_pivot.applymap('{:,.0f}'.format))

"""
            単価                   売上金額                   数量    
商品分類      アウター   トップス   ボトムス     アウター    トップス    ボトムス アウター トップス ボトムス
氏名                                                                  
上瀬 由和   14,000  6,286  5,429  106,000  42,286  29,714    8    7    6
井上 真    13,000  4,500  4,875   70,000  25,000  22,000    6    5    4
宮瀬 尚紀   12,667  6,500  5,840   77,333  42,500  35,320    6    6    6
河野 利香   14,000  6,333  5,529   76,500  35,333  26,941    5    5    5
石崎 和香菜  13,500  6,667  5,607   63,875  37,600  31,536    5    5    5
西尾 謙    14,800  5,455  5,231   78,600  26,545  27,769    5    5    5

複数のデータの平均を同時に算出することもできます。
引数valuesに、集計したいデータをリストで渡します。
実行します。
集計が同時にできました。
"""


df_pivot = df.pivot_table(index=['氏名', '売上日'],
  columns='商品分類', values='売上金額', aggfunc='sum')
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類                 アウター    トップス    ボトムス
氏名    売上日
上瀬 由和 2020-01-10  126,000     nan     nan
         2020-01-11      nan     nan   7,000
         2020-01-22      nan   4,000     nan
         2020-02-03  144,000     nan     nan
         2020-02-07      nan     nan  27,000
...                   ...     ...     ...
西尾 謙  2020-11-10   10,000     nan     nan
        2020-11-11   70,000     nan     nan
        2020-12-22      nan  24,000     nan
        2020-12-28   54,000     nan     nan
        2020-12-31      nan     nan  70,000

[212 rows x 3 columns]

indexやcolumnsに複数のカテゴリを設定することができます。
indexを氏名と売上日の2つを設定してみましょう。
また、集計方法を合計にしてみましょう。
実行します。
氏名の売上日ごと、そして商品分類の売上の合計を算出することができました。
"""


print("--- Nan置き換え ---")


"""
nanのところが気持ち悪いですよね。
nanのところを数値に置き換えることができます。
"""

df_pivot = df.pivot_table(index=['氏名', '売上日'],
  columns='商品分類', values='売上金額', aggfunc='sum',
  fill_value=0)
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類                 アウター    トップス    ボトムス
氏名    売上日
上瀬 由和 2020-01-10  126,000       0       0
      　　2020-01-11        0       0   7,000
      　　2020-01-22        0   4,000       0
      　　2020-02-03  144,000       0       0
      　　2020-02-07        0       0  27,000
...                   ...     ...     ...
西尾 謙  2020-11-10   10,000       0       0
        2020-11-11   70,000       0       0
        2020-12-22        0  24,000       0
        2020-12-28   54,000       0       0
        2020-12-31        0       0  70,000

[212 rows x 3 columns]

nanのところを0で埋めてみましょう。
fill_valueという引数に0を渡します。
実行します。
0で埋めることができました。
"""


print("--- groupbyのような集計 ---")


df_pivot = df.pivot_table(index=['氏名', '売上日'],
  values=['売上金額', '数量'], aggfunc='sum')
print(df_pivot.applymap('{:,.0f}'.format))

"""
                     売上金額  数量
氏名    売上日
上瀬 由和 2020-01-10  126,000   7
         2020-01-11    7,000   1
         2020-01-22    4,000   1
         2020-02-03  144,000   8
         2020-02-07   27,000   9
...                   ...  ..
西尾 謙  2020-11-10   10,000   1
        2020-11-11   70,000   7
        2020-12-22   24,000   6
        2020-12-28   54,000   3
      2020-12-31   70,000  10

[212 rows x 2 columns]

当然、インデックスを2つ、valuesところを2つ。
columnsを削除するということもできます。
氏名ごとの売上日で、売上と数量の合計を算出してみましょう。
実行します。
groupbyのような使い方で集計ができました。
pivot_tableを覚えてしまえば、
groupbyメソッドを使わなくてもよくなるケースが多くなることがわかりますね
"""


print("--- 合計列追加 ---")


df_pivot = df.pivot_table(index='氏名', columns='商品分類', values='売上金額', aggfunc='sum')
print(df_pivot.applymap('{:,.0f}'.format))

"""
--- 合計列追加 ---
商品分類         アウター     トップス     ボトムス
氏名
上瀬 由和     636,000  296,000  416,000
井上 真      560,000  200,000  176,000
宮瀬 尚紀     464,000  340,000  883,000
河野 利香     918,000  424,000  458,000
石崎 和香菜  1,022,000  564,000  883,000
西尾 謙      786,000  292,000  361,000

最初でみた通常のピボットテーブルはこうでしたね。
"""

df_pivot = df.pivot_table(index='氏名', columns='商品分類',
  values='売上金額', aggfunc='sum', margins=True)
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類         アウター       トップス       ボトムス        All
氏名
上瀬 由和     636,000    296,000    416,000  1,348,000
井上 真      560,000    200,000    176,000    936,000
宮瀬 尚紀     464,000    340,000    883,000  1,687,000
河野 利香     918,000    424,000    458,000  1,800,000
石崎 和香菜  1,022,000    564,000    883,000  2,469,000
西尾 謙      786,000    292,000    361,000  1,439,000
All     4,386,000  2,116,000  3,177,000  9,679,000

ここに合計の列を追加してみます。
marginsにTrueを渡せばオッケーです。
実行します。
集計行が追加されました。
"""

df_pivot = df.pivot_table(index='氏名',
  columns='商品分類', values='売上金額',
  aggfunc='sum', margins=True, margins_name='合計')
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類         アウター       トップス       ボトムス         合計
氏名
上瀬 由和     636,000    296,000    416,000  1,348,000
井上 真       560,000    200,000    176,000    936,000
宮瀬 尚紀     464,000    340,000    883,000  1,687,000
河野 利香     918,000    424,000    458,000  1,800,000
石崎 和香菜  1,022,000    564,000    883,000  2,469,000
西尾 謙        786,000    292,000    361,000  1,439,000
合計        4,386,000  2,116,000  3,177,000  9,679,000

現在、合計行の名前がAllになっていますが、この名前を変更することができます。
margins_nameに名付けたい文字列を渡しましょう。
今回は合計とします。
実行します。
合計という名前の合計行が追加されました。
"""


print("--- 複数の集計方法 ---")


df_pivot = df.pivot_table(index='氏名', columns='商品分類', values='売上金額', aggfunc=['sum', 'mean', 'count'])
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類         アウター   トップス   ボトムス   アウター   トップス   ボトムス  アウター トップス ボトムス
氏名                                                                  
上瀬 由和     636,000  296,000  416,000  106,000  42,286  29,714     6    7   14
井上 真       560,000  200,000  176,000   70,000  25,000  22,000     8    8    8
宮瀬 尚紀     464,000  340,000  883,000   77,333  42,500  35,320     6    8   25
河野 利香     918,000  424,000  458,000   76,500  35,333  26,941    12   12   17
石崎 和香菜  1,022,000 564,000  883,000   63,875  37,600  31,536    16   15   28
西尾 謙      786,000  292,000  361,000   78,600  26,545  27,769    10   11   13

複数の集計方法を同時に実行することもできます。
aggfunのところにリストで集計方法をわたしてあげればよいです。
合計、平均、個数のカウントの3つをわたしてみましょう。
実行してみます。
同時に集計することができました。
"""


print("--- 独自の集計方法 ---")


import numpy as np

def cal_tax(s):
  return np.sum(s) * 1.10

"""
集計方法は、自分で定義した関数を使うことができます。
そのため、複雑な計算であったり、お勤めの会社の独自の計算をすることもできます。
今回はシンプルに合計の消費税込みの金額を算出してみましょう。
まず、税込みの計算のためにnumpyをインポートしましょう。
NumPyとは、高速にリストの計算をするためのライブラリです。
このnumpyをnpという名前で使えるようにします。
関数の定義はdefでやります。
python超入門コース、レッスン12で関数の定義の方法をレクチャーしました。
忘れた方は、復習で再度そちらをご覧ください。
今、右上にカードがでているはずです。
さて、関数の定義をしていきます。
まず、defと書いて、関数名を書きましょう。
今回は計算という意味のcalと税金のtaxで、cal_taxとします。
np.sumで合計を算出することができるので、これに対して1.10を掛け算します。
これをreturnで返しましょう。
この今定義したcal_taxの関数を使ってみましょう。
"""

df_pivot = df.pivot_table(index='氏名', columns='商品分類',
  values='売上金額', aggfunc=cal_tax)
print(df_pivot.applymap('{:,.0f}'.format))

"""
商品分類         アウター     トップス     ボトムス
氏名
上瀬 由和     699,600  325,600  457,600
井上 真      616,000  220,000  193,600
宮瀬 尚紀     510,400  374,000  971,300
河野 利香   1,009,800  466,400  503,800
石崎 和香菜  1,124,200  620,400  971,300
西尾 謙      864,600  321,200  397,100
aggfuncのところに関数を記述するだけです。
じっこうしてみましょう。
合計をした上で、消費税の計算をすることができました。
"""


print("--- pivotの使い方 ---")


df = pd.DataFrame({'col01': ['A', 'A', 'B', 'B'], 'col02': ['a', 'b', 'a', 'b'], 'col03': [1, 2, 3, 4]})
print(df)

"""
  col01 col02  col03
0     A     a      1
1     A     b      2
2     B     a      3
3     B     b      4

ちなみに、pivot_tableメソッドではなく、pivotというメソッドもあります。
使い方はほぼ同じです。
簡単なデータフレームをつくってみましょう。
"""

df_pivot = df.pivot(index='col01', columns='col02', values='col03')
print(df_pivot)

"""
col02  a  b
col01
A      1  2
B      3  4

使い方はpivot_tableと同じです。
indexとcolumnsとvaluesにそれぞれカラム名を渡しましょう。
実行します。
集計できました。
"""

df = pd.DataFrame({'col01': ['A', 'A', 'B', 'B'],
  'col02': ['a', 'b', 'a', 'b'],
  'col03': ['X', 'Y', 'Z', 'W']})
print(df)

"""
  col01 col02 col03
0     A     a     X
1     A     b     Y
2     B     a     Z
3     B     b     W

pivot_tableとpivotとの違いは、
valuesの部分が値じゃなく文字列であっても集計できる点です。
col3のカラムを文字列にしてみましょう。
実行します。
このようなデータです。
"""

df_pivot = df.pivot(index='col01', columns='col02', values='col03')
print(df_pivot)

"""
col02  a  b
col01
A      X  Y
B      Z  W

valuesにcol3を渡してもエラーになりません。
実行してみましょう。
集計ができました。

df_pivot = df.pivot_table(index='col01', columns='col02', values='col03')
print(df_pivot)


df_pivot = df.pivot_table(index='col01', columns='col02', values='col03')
Empty DataFrame
Columns: []
Index: [A, B]

同じコードをpivot_tableでやってみましょう。
実行します。
エラーになりました。
"""

df_pivot = df.pivot_table(index='col01', columns='col02', values='col03', aggfunc='first')
print(df_pivot)

"""
col02  a  b
col01
A      X  Y
B      Z  W

ただし、集計方法のaggfuncのところの
最初のデータを取得するfirstとすればエラーになりません。
実行します。
エラーにならず集計ができました。
細かいことをいうと、
pivotはインデックス・列のペアが一意でない場合はエラーになるなどの違いもあります。
とはいえ、pivot_tableメソッドを覚えておけば
大抵の集計や加工は問題なくできます。
まずはpivot_tableをマスターしましょう。
"""
