#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座 ---")
print("--- Python応用編 ---")
print("--- NumPy入門 基本的な線形代数計算 その1 ノルム・正規化・正規直交化 ---")


print("--- ノルムと正規化 ---")


"""
ノルム

numpy.linalg.normを使用するとベクトルのノルムを求めることができます。
ピタゴラス数の小さい２数を使用した２次元ベクトルのサンプルを見てみましょう。
"""

import numpy as np

x = np.array([3, 4])
print(np.linalg.norm(x))

y = np.array([33, 56])
print(np.linalg.norm(y))

"""
5.0
65.0

斜辺の長さとなっていることが確認できます。３次元以上でも同様です。
"""

import numpy as np

x = np.array([2, 4, 4])
print(np.linalg.norm(x))

"""
6.0

正規化

numpy.linalg.normでノルムが求まりました。
長さで割り算すると正規化することができます。
先ほどのサンプルをさらに正規化してみましょう。
"""

import numpy as np

x = np.array([2, 4, 4])
norm = np.linalg.norm(x)
print(norm)

# ノルムで除算し正規化する
e = x / norm
print(e)

# 正規化を確認する
print(np.linalg.norm(e))

"""
6.0
[0.33333333 0.66666667 0.66666667]
1.0

最終的にノルムが1の正規化されたベクトルを算出することができました。
"""


print("--- 正規直交化 ---")


"""
次に２つの基底ベクトルが張るベクトル空間に対し、
基底を正規直交化してみましょう。
線形代数の授業などではグラムシュミットの正規直交化を利用したと思いますが、
私も含め難儀された方が多いのではないでしょうか？
np.linalg.qrを使用するとQR分解されたものが返されます。
すなわち、任意の正則行列Aが直交行列Qと上三角行列Rの積に分解されて
値が返されるわけです。
3次元ベクトル空間内に基底(1, 1, 0)、(0, -1, 0)が張る部分空間
（つまり３次元空間中のXY平面）があったとします。
この基底を正規直交化してみましょう。
"""

import numpy as np

# 基底(1, 1, 0), (0, -1, 0)
a = np.array([[1, 1], [1, -1], [0, 0]])
print(a)

q, r = np.linalg.qr(a)
print(q)

print(r)

"""
[[ 1  1]
 [ 1 -1]
 [ 0  0]]

[[-0.70710678 -0.70710678]
 [-0.70710678  0.70710678]
 [-0.         -0.        ]]

[[-1.41421356e+00  3.33066907e-16]
 [ 0.00000000e+00 -1.41421356e+00]]

QR分解された値が取得できました。
せっかくなので、実際に正規直交なのかを内積とノルムを計算して確認してみましょう。
"""

# 内積を計算する
ip = np.dot(q[0], q[1])

print("%.10f" % ip)

# ノルムを確認する
print(np.linalg.norm(q[0]))

print(np.linalg.norm(q[1]))

"""
-0.0000000000
0.9999999999999998
0.9999999999999999

誤差により厳密には0になりませんので、
内積の方はフォーマットにより小数点表示で丸めて確認しています。
"""
