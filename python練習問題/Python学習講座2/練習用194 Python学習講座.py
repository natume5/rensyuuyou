#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座 ---")
print("--- Python入門 ---")
print("--- 文字列への埋め込み ---")


print("--- 文字列への変数埋め込み ---")


"""
Pythonで文字列に対して値を埋め込む方法はいくつかあるのですが、
このページでは以下3つの方法について解説します。

    f文字列
    formatメソッド
    printf 形式

"""


print("--- f文字列 ---")


"""
Python3.6以降、フォーマット済み文字列リテラルと呼ばれる記法が使用できます。
f文字列と呼ばれることもあります。
リテラルの先頭にfを記述し、埋め込みたい変数を中括弧でくくります。
ただし、変数は予め定義する必要があります。
"""

item = 'apple'
text = f'There is an {item}.'
print(text)    # There is an apple.


print("--- formatメソッド ---")


"""
文字列のformatメソッドを使用すると
中括弧で置換フィールドを設定することができます。
フィールドの設定方法は3つあり、中括弧単体、
中括弧内に順序 or キーを指定する方法があります。
"""

item1 = 'apple'
item2 = 'banana'

# 中括弧単体
text1 = 'There are {} and {}.'
print(text1.format(item1, item2))
# There are apple and banana.

# 順序指定
text2 = 'There are {0} and {1}.'
print(text2.format(item1, item2))
# There are apple and banana.

# キー指定
text3 = 'There are {item1} and {item2}.'
print(text3.format(**{'item1': item1, 'item2': item2}))
# There are apple and banana.


print("--- printf形式 ---")

"""
C言語のprintf形式と同様に%演算子に対しフォーマットすることができます。
順番にタプルで指定する方法と、辞書でキーを指定する方法があります。
ただし2021年現在、公式でも「よくある問題を引き起こす」といった記述があり、
上で紹介した2つの方法と比較して廃れつつある印象があります。
ただし、古いライブラリでは使用されているため
知識として知っておくとコードを読み解く際に役に立つかと思います。


タプル

%sを列挙し、%演算子の後にタプルを指定します。
"""

text = 'There are %s, %s and %s.'
f_text = text % ('aplle', 'bananas', 'oranges',)
print(f_text)    # There are aplle, bananas and oranges.

"""
辞書

%とsの間に丸括弧でキーを挟むと、辞書を指定することができます。
以下のサンプルは、"first", "second", "third"がそれぞれキーになります。
複雑なフォーマットを指定する場合はこちらを使用したほうがよいでしょう。
"""

text = 'There are %(first)s, %(second)s and %(third)s.'

f_text = text % {'first': 'aplle', 'second': 'bananas', 'third': 'oranges'}
print(f_text)    # There are aplle, bananas and oranges.



print("--- YUMARU BLOG ---")
print("--- 【Python】文字列に値を埋め込む方法【フォーマット】 ---")


"""
この記事では、文字列に値を埋め込む方法を解説します。
Pythonには、3種類のフォーマット方法が用意されているので
それぞれ使い方を見ていきましょう。
また、さまざまな書式が用意されており、
設定することで値を埋め込む際に特殊な効果を付属させることもできます
(0埋めなど)。
それでは、文字列に値を埋め込む方法を見ていきましょう!
"""


print("--- フォーマット済み文字列リテラル ---")


"""
フォーマット済み文字列リテラルを使うことで簡単に文字列にデータを埋め込むことができます。この方法が一番オススメ。f-stringなどと呼ばれたりもします。
※ Python3.6から追加

書式

文字列リテラルのプレフィックスとしてf、またはFを付け、
文字列中の値を埋め込みたい箇所に{}を記述し、
その中に変数や値を書き込みます。

f'{埋め込む値や変数}'

サンプル

以下のコードでは、文字列リテラルを使って直接値を埋め込んでいますが、
その際のクォーテーションには注意してください。
"""

# 変数も埋め込める
age = 15

text = f'名前: {"山田太郎"}, 年齢: {age}, 性別: {"男"}'
print(text)    # 名前: 山田太郎, 年齢: 15, 性別: 男


print("--- str.formatメソッド ---")


"""
str.formatメソッドを使うことで文字列にデータを埋め込むことができます。

書式

文字列中の値を埋め込む箇所に{数字}を記述します。
そして、formatメソッドを呼び出し、引数に挿入したい値を順番に記述します。

'{0} {1}'.format({0}に埋め込む値, {1}に埋め込む値)

数字は省略することも、

'{} {} {}'.format(値1, 値2, 値3)

キーワードで指定することもできます。

'{name} {age} {gender}'.format(name='名前', age='年齢', gender='性別')

サンプル

文字列中に数字とキーワードのどちらも指定されている場合は、
formatメソッド内で数字の値から指定し、その後でキーワードの値を指定しましょう。
"""

text = '名前: {0}, 年齢: {age}, 性別: {1}'.format('田中花子', '女', age=15)
print(text)    # 名前: 田中花子, 年齢: 15, 性別: 女


print("--- %記法 ---")


"""
C言語などでも使われている%記法を使ってデータを埋め込むことができます。

書式

値を埋め込みたい箇所に「フォーマット指定子」を記述し、
%で埋め込む値を文字列リテラルの後に繋ぎます。

'%s %d' % (値1, 値2)

%sや%dはフォーマット指定子(変換指定子)と呼ばれ、
記述した箇所に特定の型の値を埋め込むことができます。

フォーマット指定子には、以下のようなものがあります。
%d 	符号付10進整数
%f 	10進浮動小数点数
%c 	文字一文字
%s 	文字列(str()で変換)

サンプル

試しに文字列中にデータを埋め込んでみます。
"""

text = '名前: %s, 年齢: %d, 性別: %s' % ('山田太郎', 15, '男')
print(text)    # 名前: 山田太郎, 年齢: 15, 性別: 男


print("--- まとめ ---")


"""
この記事では、Pythonで文字列に値を埋め込む方法を解説しました。
基本的には「フォーマット済み文字列リテラル」が簡単に扱えるのでおすすめですが、
比較的に最近追加されたのでバージョンには気をつけましょう!
"""



print("--- ITガイドより ---")
print("--- Python: 文字列中に変数の値を埋め込む format, f-string ---")


"""
Pythonで文字列の中に数値など変数の値を埋め込みたい場合、 
format()メソッドか f-string（f文字列）を使って実現できます。 
f-stringはPython3.6で導入された新しい方法です。 
2つの方法を順番に紹介していきます。
"""


print("--- format() ---")


"""
format()メソッドの書式は次のとおりです。
書式

"{}を埋め込んだ文字列".format(変数1, 変数2, ..)

波括弧{}の部分をプレースホルダーと言います。 
プレースホルダーとは、後から実際の値を埋め込むために
仮に確保した場所のことです。
変数の値を埋め込みたい部分に{}を入れ、
format()の引数として埋め込む変数を指定します。
"""

name = '田中'
print('こんにちは{}さん'.format(name))
# こんにちは田中さん

"""
次のようにも書けます。
"""

name = '田中'
words = 'こんにちは{}さん'
print(words.format(name))
# こんにちは田中さん

"""
変数が複数の場合

変数が複数の場合は、変数をカンマで区切ります。
記述されている順番に変数の値が埋め込まれます。
次のサンプルコードでは、変数s, numの順番で値が埋め込まれています。
"""

s = '合計値'
num = 15

print('2つの{}は{}です。'.format(s, num))
# 2つの合計値は15です。

"""
変数の順番を指定

変数の順番を指定することもできます。
その場合、{0}や{1}のように{}の中に0から順番に数値を指定します。
先程のコードを利用して、.format(num, s)と引数の順番を変えてみます。
"""

s = '合計値'
num = 15

print('2つの{1}は{0}です。'.format(num, s))
# 2つの合計値は15です。

"""
式を指定

format()の引数として、
変数だけでなく「a + b」のような式を指定することも可能です。
"""

s = '合計値'
a = 10
b = 5

print('2つの{}は{}です。'.format(s, a + b))
# 2つの合計値は15です。


print("--- f-string（f文字列） ---")


"""
f-stringはPython3.6から導入されました。
変数の値を埋め込む方法としては、
format()よりもf-stringの方が直感的でわかりやすいと思います。

書式

f"{変数}を埋め込んだ文字列"

文字列の直前に「f」を付けるのを忘れないでください。
後はプレースホルダーの{}の中に直接変数を指定します。
"""

name = '田中'

print(f"こんにちは{name}さん")    # こんにちは田中さん

"""
変数が複数の場合

変数が複数の場合ももちろん可能です。
複数の場合はformat()を使うよりも明らかにわかりやすくなります。
"""

s = '合計値'
num = 15

print(f"2つの{s}は{num}です。")    # 2つの合計値は15です。

"""
式を指定

{}の中に「a + b」のような式を指定することもできます。
"""

s = '合計値'
a = 10
b = 5

print(f"2つの{s}は{a + b}です。")    # 2つの合計値は15です。



print("--- Smart-Hintより ---")
print("--- 【Python】文字列に変数で定義した値を埋め込む方法｜format ---")


print("--- 文字列に値を埋め込むとは？ ---")


"""
変数として設定している値を、文字列に埋め込む方法をご紹介しています
テキストを自由自在に変更したり、
データ加工の結果によって値を変えることができます
"""

x = 'Python'

print(f'私は{x}を勉強しています')    # 私はPythonを勉強しています


print("--- 変数を文字列に埋め込む方法 ---")


"""
変数を文字列に埋め込むにはformatメソッドを利用します
また値を埋め込みたい場所を明示するために{ }を使いましょう
まずはxという変数に「Python」という文字列を代入します

x = 'Python'

続いて「私は○○を勉強しています」という文字列に対して、
formatメソッドを適応させます
自由に変えたい部分「○○」には{ }を記述しましょう
そしてformatの引数には、事前に作ったxの変数を指定します
※最後にprintを使い文章を返す設定にしましょう
"""

x = 'Python'

print('私は{}を勉強しています'.format(x))
# 私はPythonを勉強しています

"""
元のテキスト部分「私は○○を勉強しています」 も変数化しておくこともできます
"""

text = '私は{}を勉強しています'
x = 'Python'
print(text.format(x))    # 私はPythonを勉強しています


print("--- 3つのformatの使い方 ---")


"""
ormatメソッドでは{ }の部分に値を埋め込みますが、
{ }を置換フィールドと呼びます
置換フィールドの指定方法には3種類あり、複数の変数を扱うことも可能です


① { } 置換フィールドのみ

変数を事前に用意しておき、それを{ }の中に埋め込む設定をします
formatの引数には変数を記述します
{ }の中に変数が自動的に埋め込まれます
"""

x = 'Python'
print("私は{}も勉強しています".format(x))
# 私はPythonも勉強しています

"""
2つ以上の変数を埋め込む場合は、
引数を2つ設定することで値が順番に格納されます
"""

x = 'Python'
y = 3
print('私は{}を勉強して{}日です'.format(x, y))
# 私はPythonを勉強して3日です

"""
② {1} フィールド番号を指定

複数の値を埋め込む場合は、明確に埋め込む場所を指定しましょう
{ }の中に番号を指定することで、引数の順番を指定することができます
"""

x = 'Python'
y = 4
print('私は{0}を勉強して{1}日です'.format(x, y))
# 私はPythonを勉強して4日です

"""
「0」から始まり、引数の順番に値が埋め込まれます


③ {text} フィールド名を指定

フィールド番号と同様に、埋め込む場所を明確に指定するために、
フィールド名を利用することもできます
{ }の中に特定の文字列を記載し、
formatの引数の中で「どの変数を埋め込むか」を＝イコールで指定します
"""

x = 'Python'
y = 5
print("私は{a}を勉強して{b}日です".format(a = x, b = y))
# 私はPythonを勉強して5日です

"""
おすすめの記述方法

指定方法に関しては③のフィールド名を指定することをおすすめします
コードを複雑に記述していくと、
どの文字列にどの変数が埋め込まれるか分からなくなるためです
分かりやすいように変数名も工夫すると良いでしょう
"""

pro = 'Python'
ds = 6
print("私は{programming}を勉強して{days}日です".format(programming = pro, days = ds))
# 私はPythonを勉強して6日です


print("--- 実例：今日の日付を値に埋め込む ---")


"""
最後に今日の日付を自動的に値に埋め込む方法をご紹介します
datetimeのtodayで今日の日付を取得します
日付が変わっても、当日の日付を自動的に取得することができます
"""

from datetime import datetime, date

today = date.today().strftime('%Y-%m-%d')
print(today)    # 2022-10-20

"""
そしてこの変数をformatメソッドを利用して、文字列に埋め込みます
"""

text = '最終更新日は{today}です'
print(text.format(today = today))
# 最終更新日は2022-10-20です


print("--- まとめ ---")


"""
今回はformatメソッドを利用して、
変数の値を文字列に埋め込む方法をご紹介してきました
応用の利く記述方法なのでぜひ使ってみてください
"""
