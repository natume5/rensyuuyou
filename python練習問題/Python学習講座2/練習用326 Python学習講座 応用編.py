#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座 ---")
print("--- Python応用編 ---")
print("--- イベント ---")


"""
前回、Tk()でメインウィンドウを生成し、
ボタンやラベル等の様々なウィジェットを配置してみました。
今回はボタンをクリックする等の操作をした際に処理を行う方法について解説します。

※ 2022/10/17 解説コードのウィジェットについて
当初ttkを使用していましたがデフォルトに変更しました。
ttkについてはこちらで解説しています。
"""


print("--- イベントとイベントハンドラ ---")


"""
GUIアプリケーションは「マウスでボタンをクリックした」「入力値が変わった」
「マウスが動いた」といった操作を画面上で行いますが、
こういった画面上で行われた「何らかの出来事」をイベントと呼びます。

イベントにはそれ以外にも以下のようなものがあります。

    キーボードのキーが押されたされた
    画面がスクロールされた
    画面サイズが変更された
    画面が閉じられた

つまり、マウスやキーボードを使って画面上で行われた操作は
すべてイベントと呼ぶことができます。
また、あるボタンをクリックしたとき等、
特定のイベントが発生した際に処理を実装することになりますが、
こういった「特定のイベントが発生した時に実行するよう定められた処理」
のことをイベントハンドラやイベント処理などと呼びます。
また、イベントとイベントハンドラを紐づけることをバインドと呼びます。
通常、GUIアプリケーションはイベントの発生を
待ち受けイベント発生が通知されると必要に応じてイベントハンドラが起動します。
このイベント発生の待受状態をメインループやイベントループと呼びます。
"""


print("--- イベントハンドラの実装 ---")


"""
それでは実際に実装してみましょう。
ボタンがクリックされた際に文字列をprintするだけの関数、
my_funcを実行してみます。
"""

from tkinter import Tk, Button


# メインウィンドウ生成
root = Tk()

# メインウィンドウの設定
root.title('サンプル')

# イベントハンドラ
def my_func(event):
	print('処理実行')
	print(event)

# ボタンウィジェットをメインウィンドウに配置、イベントを登録
button = Button(root, text='button1')
button.bind('<Button-1>', my_func)
button.pack()

# イベントループの開始
root.mainloop()

"""
11行目以降、ボタンがクリックされた際に実行する関数
my_funcを定義しています。
printで文字列を出力するだけの関数で、
引数にイベントの状態が格納されたeventオブジェクトを受け取ります。
19行目ではボタンがクリックされたイベントと、
my_funcを紐づけ、つまりバインドしています。バインドは以下のように記述します。

バインド
ウィジェット.bind(イベント名, イベントハンドラ)

イベントは文字列で指定します。
ボタンを押下する場合は「<Button-1>」を指定します。
ウィジェット生成時にイベントハンドラを登録する方法もあるのですが、
本講座ではすべてbindを使用して解説します。
実行してボタンを押下してみると以下のような文字列が出力されます。

処理実行
<ButtonPress event num=1 x=55 y=11>

イベントオブジェクトに座標などの
イベントの状態が格納されていることが確認できます。
"""


print("--- 画面の状態を変更 ---")


"""
当然、イベントハンドラでウィジェット等の画面の状態を変更することも可能です。
ボタンをクリックするとラベルの文字列が変更されるアプリを作成してみましょう。

StringVar

その前に準備としてにStringVarについて解説します。
ラベルを生成する際に引数で表示する文字列を指定しますが、
文字列はイミュータブルであるため、後から変更することができません。
StringVarを使用するとsetメソッドで後から文字列を変更することが可能です。

text = StringVar()
text.set("文字列設定")
label = Label(root, textvariable=text)

# setで後からでもラベルの文字列が変更できる
text.set("文字列変更")


ボタンをクリックするとラベルが変更

それではボタンをクリックすると
ラベルの文字列が変更されるアプリを作成してみましょう。
"""
"""
from tkinter import Tk, StringVar, Button, Label


# メインウィンドウ生成
root = Tk()

# メインウィンドウの設定
root.title('サンプル')

# ラベルの配置
text = StringVar()
text.set('処理はまだ実行されていません')
label = Label(root, textvariable=text)
label.pack()


# イベントハンドラ
def my_func(event):
	global text
	text.set('処理が実行されました')

# ボタンウィジェットをメインウィンドウに配置、イベントを登録
botton = Button(root, text='button1')
button.bind("<Button-1>", my_func)
button.pack()

# イベントループの開始
root.mainloop()
"""
"""
変更するラベルはモジュール変数として定義しているため
イベントハンドラ内でglobal文を使用します。
実行すると以下のようにボタンをクリックすると
ラベルが変更されることが確認できます。
"""



print("--- sampo より ---")
print("--- (tkinter)ボタンをクリックすると、ラベルの文字が変わる ---")


"""
PythonでGUIアプリを作ることができる標準モジュール
「tkinter」の使い方を紹介します。
よく使うことの多い部品（ウィジェット）
であるラベルとボタンの基本的な使い方になります。
この記事を読み終えると、次のことができるようになります。

    ラベルとボタンを作り、ウィンドウに表示することができる
    ボタンをクリックすると、何らかの処理を実行することができる
    ラベルの文字や色、サイズを変えることができる

それでは、始めましょう！
"""


print("--- 完成プログラムの確認 ---")


"""
個々の説明を始める前に、プログラムの完成版を確認しておきましょう。
今回は、ボタンをクリックすると、ラベルの文字が変わるプログラムを作ります。
"""


import tkinter


def click_btn():
	label['text'] = '文字が変わります'
	label['font'] = ('System', 50)

root = tkinter.Tk()
root.title('ボタンをクリックすると、ラベルの文字が変わる')
root.geometry('450x200')

label = tkinter.Label(root, text='ラベルです', font=('System', 24))
label.place(x=30, y=25)

button = tkinter.Button(root, text='クリックすると・・・', font=('System', 24), command=click_btn)
button.place(x=30, y=100)

root.mainloop()

"""
プログラムを実行すると、
ラベルに表示されている文字と文字の大きさが変わります。
それでは、中身の説明に入ります。
"""


print("--- ラベル ---")


"""
ラベルを作る

label = tkinter.Label(root, text='ラベルです', font=('System', 24))

この部分でラベルを作っています。
ラベルを作る構文は次のようになります。

変数名 = tkinter.Label(ウィンドウオブジェクト, 
text=’ラベルに表示する文字列’, font=(‘フォント名’, フォントサイズ))

変数名にラベルオブジェクトが格納されます。
ウィンドウオブジェクトは変数rootに格納されているので、rootを指定しています。
textオプションでラベルに表示する文字列を指定しています。
fontオプションは、フォントに関することを指定します。
‘フォント名’は必ず指定しないといけません。
あとここでは、フォントサイズの指定をしています。


ラベルを配置する

label.place(x=30, y=25)

ここで作ったラベルをメインウィンドウ（ここではroot）に配置しています。
place()は、X座標とY座標で配置する場所を指定します。
ウィンドウの左上がx=0, y=0であることを覚えてください。
配置する方法は他に、pack()とgrid()があります。
"""


print("--- ボタン ---")


"""
ボタンを作る

button = tkinter.Button(root, text='クリックすると・・・', font=('Syetem', 24), command=click_btn)

以下、ボタンを作る構文です。

変数名 = tkinter.Button(ウィンドウオブジェクト,
 text=’ボタンに表示する文字列’, font=(‘フォント名’, フォントサイズ),
 command=関数名)

ほとんどラベルと同じなので、違う部分だけ説明します。
違うのは最後の、command=関数名の部分です。
これは、ボタンをクリックした時にどの関数を実行するかを指定しています。
では、この関数の中身を見てみましょう。
"""


print("--- ボタンをクリックした時の処理を記述した関数 ---")


"""
def click_btn():
    label['text'] = '文字が変わります'
    label['font'] = ('System', 50)

ボタンをクリックすると、ラベルのテキスト（表示する文字）と
フォント（ここでは、フォントサイズ）を変更する処理を書いています。
このように、ボタンをクリックした時に何かをさせるには、
その何かの部分を関数として定義し、
ボタンのcommandオプションでその関数を指定すればOKです。
注意点は、関数の定義はボタンを作る前までに記述しておくことと、
commandオプションで関数を指定する時は()を付けないことです。
ボタンの配置もラベルと同じなので、割愛します。
"""


print("--- まとめ ---")


"""
これで、ボタンをクリックするとラベルの文字を変えることができました。
今回、説明したところはGUIアプリを作る上で、基本となるところなので、
いろいろ試しながら必ずマスターしましょう。
"""




print("--- https://getech-lab.toniemon.com ---")
print("--- getechらぼ より ---")
print("--- 【tkinter】クリックするとテキストが表示されるボタンを実装する　《引数を渡してイベント実行》【PythonでGUIアプリ開発】 ---")


"""
今回はウィンドウにボタンを実装してみたいと思います。
ボタンを押すとテキストを表示する簡単なプログラムです。
ボタンを押したときに引数を渡して、
その先の関数の方で引数を使って処理をするものを作成しました。
"""


print("--- クリックするとテキストが表示されるボタンを実装する ---")


import tkinter as tk


main_win = tk.Tk()
main_win.title('テスト用ウィンドウ')
main_win.geometry('400x300')

def push_button(str):
	text = tk.Label(main_win, text='pushed button :' + str)
	text.pack()

button = tk.Button(text='ボタン', command=lambda: push_button('test'))
button.pack()

main_win.mainloop()


print("--- 解説 ---")


"""
実行結果はボタンをクリックすると、テキストが表示されるシンプルなプログラムです。
ボタンのウィジェットの設定はtk.button()で行なっています。
ボタンにテキストを表示するにはtext=《表示するテキスト》を設定します。
ボタンを押したときのイベントはcommandのパラメーターを使用します。
今回はボタンを押したとき、push_buttonという関数が実行されるようにしています。
その関数の中で、Labelを使用してテキストを表示させるようになっています。
引数を渡すことができるので、ボタンごとに表示させるテキストを引数として渡せば、
ボタンごとに表示されるテキストを変えることも可能です。
引数を渡すには、実装コードのようにlambdaが必要になるので、
忘れないようにしましょう。
"""


print("--- ボタンの枠の太さを変える設定 ---")


import tkinter as tk


main_win = tk.Tk()
main_win.title('テスト用ウィンドウ')
main_win.geometry('400x300')

def push_button(str):
	text = tk.Label(text='ushed button :' + str)
	text.pack()

button = tk.Button(text='ボタン', command=lambda: push_button('test'))
button['bd'] = 10
button.pack()

main_win.mainloop()


print("--- 解説 ---")


"""
bdオプションに枠の幅となる数値を設定すると、ボタンの枠の太さが変更できます。
"""


print("--- bitmapのアイコンを使う ---")


"""
これまでは、ボタンにテキストをいれていましたが、
そのテキストの代わりにbitmapのアイコンを使うことができます。
"""
"""

import tkinter as tk


main_win = tk.Tk()
main_win.title('テスト用ウィンドウ')
main_win.geometry('400x300')

button_type = []
for bitmap_type in ['error', 'gray12', 'gray25', 'gray50',
'gray75', 'hourglass', 'info', 'questhead', 'question',
'warning']:
	button_type[bitmap_type] = tk.Button(bitmap = bitmap_type)
	button_type[bitmap_type].pack()

main_win.mainloop()

"""

"""
変更するラベルはモジュール変数として定義しているため
イベントハンドラ内でglobal文を使用します。
実行すると以下のようにボタンをクリックするとラベルが変更されることが確認できます。
"""
