#!/usr/bin/python
# -*- coding: UTF-8 -*-


import sys


print("--- Python学習講座---")
print("--- Python入門　識別子---")


"""
識別子

プログラミングでは、さまざまなモノ（クラス、関数、変数など）に対して名前をつけていく作業が発生します。
こういった名前のことを識別子と呼びます。
識別子はある程度は自由にプログラマが決めることが可能なのですが、
ある一定のルールがあり、そこから逸脱すると実行に失敗したり予期せぬ動作を引き起こすことがあります。


識別子に利用できる文字

アルファベットの大文字、小文字、アンダースコア、半角数字が利用できます。

数字は識別子の先頭には使えません。実は、ASCII以外の文字も利用できますが、本講座では利用しません。
詳しく知りたい方は、PEP-3131で調べてみてください。
予約語

また、制御に利用するような特定の文字列は一般的に予約語と呼ばれ、識別子として利用することはできません。

Pythonでは予約語のことをkeywordとも呼びます。以下、Python3.8の予約語です。
False 	await 	else 	import 	pass
None 	break 	except 	in 	raise
True 	class 	finally 	is 	return
and 	continue 	for 	lambda 	try
as 	def 	from 	nonlocal 	while
assert 	del 	global 	not 	with
async 	elif 	if 	or 	yield

バージョンを重ねるにつれ増えているため、下記の公式ドキュメントも合わせて確認してください。

2.3.1. キーワード (keyword)

なお、手元の環境の予約語を調べる場合は以下のPythonスクリプトを実行すると予約語がリストとして列挙されます。

from keyword import kwlist
print(kwlist)
# ['False', 'None', 'True', 'and', 'as', 'assert', 'async',
 'await', 'break', 'class', 'continue', 'def', 'del', 'elif',
 'else', 'except', 'finally', 'for', 'from', 'global', 'if',
 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or',
 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

識別子の注意点

アンダースコアで始まる識別子は、特別な意味があります。
このページでは細かい説明を割愛しますが、アンダースコアをつけた識別子は、
インポートやクラスを利用する際の挙動に特徴がある、ということを覚えておきましょう。
"""


print("--- Python入門　変数の基本---")


"""
変数とは

変数とは、プログラミング上でデータを保持するためのメモリ上の領域、
つまり「データを格納するためのハコ」につけた名前、ラベルのようなものです。

例えば、ハコaに2を、ハコbに3を入れて、足した結果をハコcに格納する場合、Pythonでは以下のように記述します。

少々回りくどく感じるかもしれませんが、値2と3を格納したハコにa、bとラベルをつけ、そ
れらを足した5を格納するハコにcというラベルがつけられている、というイメージです。

また、ハコ、つまり変数の中身を表示したい場合、以前学習したprint関数を使用します。
"""

a = 2
b = 3
c = a + b
print(c)


"""
変数の基礎
変数定義

一部のプログラミング言語では、変数宣言や型宣言という「これからこういった型の変数を使用します」
という宣言が必要なのですが、Pythonの変数は変数宣言や型の宣言は不要で、
先程のコードの通り変数名と値をイコールで結べばそのまま変数として使用することができます。
変数名として使用可能な識別子は前回の記事を参考にしてください。

以下の形式となります。

変数名 = 値

では、サンプルを見てみましょう。以下のコードはPythonの様々な型の変数を定義してprint関数で出力しています。
入門者の方は実際にスクリプトを書いて実行してみることをおすすめします。

# 変数を定義する
a = 1 # 数値
b = 'AAA' # 文字列
c = [1, 2, 3] # リスト
d = {'apple': 200, 'orange': 100, 'banana': 150}  # 辞書

# 定義した変数の内容を出力してみる
print(a) # 1
print(b) # AAA
print(c) # [1, 2, 3]
print(d) # {'orange': 100, 'banana': 150, 'apple': 200}

# 未定義の変数の内容を出力してみる
print(e) # 以下のエラーが出力される
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'e' is not defined

最後にエラーが起きていますが、これは定義していない変数eを出力しようとして、NameErrorが発生しています。
つまり「定義していない変数は使えない」ということを抑えておいてください。
"""

# 変数を定義する
a = 1    # 数値
b = "AAA"    # 文字列
c = [1, 2, 3]    # リスト
d = {'apple': 200, 'orange': 100, 'banana': 150}    # 辞書

# 定義した変数の内容を出力してみる
print(a)    # 1
print(b)    # AAA
print(c)    # [1, 2, 3]
print(d)    # {'apple': 200, 'orange': 100, 'banana': 150}


"""
変数への再代入

宣言した変数に別の値で上書きすることが可能です。
"""

a = 1
print(a)    # 1
a = 'aaa'
print(a)    # aaa

"""
最初に変数aに数値を代入してprintで出力しています。
次にaに文字列を代入して出力しています。
前後で値が変わっていることが確認できると思います。
最初、1が格納されていたハコにaというラベルをつけています。
このラベルを'aaa'が格納されたハコに付け替えています。
元のハコの中身が変わったわけではない、という点に注意してください。
"""


"""
別変数への代入

一旦定義した変数の値に対し、別の変数に紐付けることができます。
"""

a = 'aaa'
b = a

"""
文字列'aaa'が入ったハコにaというラベルをつけました。
その後、aが指し示すハコにbという名前もつけている状態です。
"""


"""
複数同時の初期化、代入

また、複数の変数を同時に初期化したり代入することができます。
"""

x, y, z = 1, 2, 3
a, b, c = x, y, z

print(a)    # 1
print(b)    # 2
print(c)    # 3

"""
x, y, zをそれぞれ同時に初期化しています。
また、a, b, cに対し同時にx, y, zを代入しています。
一定のルールで統一性を持たさないと可読性が落ちるため注意してください。
"""


"""
定数

定数とは値の変更を許可しない変数のことです。
例えば、消費税率等を格納する変数は価格を算出するプログラムが動作している最中に書き換わると困りますので、
多くの言語では定数というものがサポートされています。

このページでも変数の次は定数を学習、といきたいところなのですが、なんとPythonに定数はありません。

慣習的に大文字の変数を定数とみなす場合がありますが、
変数の書き換え自体を禁止する仕組みはありませんので注意してください。
"""


"""
変数の種類

次回から様々な代表的な変数について学習を進めていきますが、
その前に基本的な変数種類の全体像を俯瞰しておきましょう。
pythonの基本的な変数には以下のようなものがあります。
わからない単語があるかもしれませんが、学習を進めて実際に手を動かすと理解できるようになると思います。


数値

数値を扱う変数の型で、演算を行うことが可能です。
整数型(int)、実数型(float)、複素数型(complex)が挙げられます。
また、True/Falseを扱う論理型もpythonでは内部的には数値の一種です。


コレクション

複数のオブジェクト（※）の集まりを表現するデータ構造の総称をコレクションと呼びます。
コレクションの代表例としてはリストのようなシーケンス、集合、辞書が挙げられます。(注1)

（プログラミング未経験者向けに、ページ下部にオブジェクトについて補足しています。）


シーケンス型

シーケンス型とは、「データを順番に並べたものをひとかたまりとしたデータ」で、
他のプログラミング言語では配列と呼ばれることもあります。
list型と呼ばれるものがシーケンス型の代表です。
また、イミュータブル（一旦生成すると後から変更ができないこと）なtuple型というものがあります。
また、Pythonでは文字列もシーケンスなので、シーケンスとしての処理が適用できます。
このことは比較的重要なので覚えておいてください。


集合型

集合型とは「データの集合をひとかたまりとしたデータ」、つまり集合そのものを表します。
重複要素と順序をもたないset型という型が用意されています。
Pythonのset型は集合演算が利用できるという点が特徴的です。
また、frozensetというイミュータブルなものも用意されています。


マッピング型

他のプログラミング言語ではハッシュ型と呼ばれることがあります。
キーと値を持つデータの集まりで、キーを指定すると目的のデータをすばやく取得することが可能です。
"""


"""
補足 変数と値とオブジェクト

初学者向けの補足です。ページ上部で、変数について以下のような説明をしました。

変数名 = 値

この「値」という単語について、サンプルで数値や文字列などを例示しましたが、
「値」というものは全てPythonではオブジェクトと呼ばれるものの一種です。
このため値のことをオブジェクトと呼ぶ場合があります。

オブジェクトとは、上のサンプルのようにデータの「値」を表す以外に何らかの「機能」を持っている場合があります。
この機能のことをメソッドと呼びます。

オブジェクトについて理解するためにはクラスについても理解する必要がありますが、
これらについては後ほど別途説明します。
このため、当面はオブジェクトとは「何かしらの値」で「何らかの機能を持っている」と考えてください。

また、（ややこしいことに）変数という単語はは上で説明したとおりオブジェクトに名付けたラベルを指す場合と、
オブジェクトそのものを指す場合とがあるので注意してください。

※1:以前は複数のデータ集合をコンテナと呼び当サイトでもコンテナと記述していたのですが、
近年はDockerなどのコンテナを指す場合が多いためコレクションに記述を改めました。
"""


print("--- Python入門　数値型の変数---")

"""
数値型

数値型にはint型（整数）、float型（実数）、complex型（複素数）の3つがあります。
また、別ページで解説する真理値を表すbool型というものも数値として扱えますが、
これはint型のサブクラスとして定義されています。


int型

まずはint型です。名前の通りinteger、つまり整数を表します。
Pythonのint型は桁数の制限が設けられていません。
このためC言語等、他の言語で使用されるlong型はありません。
以下のコードは変数numに整数値5を代入してprint関数で出力しています。
"""

num = 5
print(num)    # 5

"""
また、intに2進数、8進数、16進数の表記を利用することもできます。
進数  表記
10進数    そのまま記述
2進数     0b
8進数     09
16進数    0x

以下、2進数、8進数、16進数のサンプルです。
"""

bin_val = 0b0101
print(bin_val)    # 5

oct_val = 0o165
print(oct_val)    # 117

hex_val = 0xfaa
print(hex_val)    # 4010


"""
float型

次はfloat型です。小数を含む数値を表します。指数表記でも利用することが可能です。
"""

x = 0.0012
print(x)    # 0.0012

y = 1.2e-3
print(y)    # 0.0012

"""
上のコードは変数x、yともに表記が異なりますが、同じ値が代入されていることが確認できます。


float型の精度

float型の精度について補足します。Pythonのfloatの精度はマシンに依存します。
大抵は53ビットになっていますが、お使いの環境の精度を調べる場合、
以下のようにsysモジュールのfloat_infoを確認します。
"""

# import sys
sys.float_info
"""
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, 
max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, 
min_10_exp=-307, dig=15, mant_dig=53, 
epsilon=2.220446049250313e-16, radix=2, rounds=1)
"""

"""
complex型

3つ目が複素数を表すcomplex型です。実数部分と虚数部分はともにfloat型となります。

定義時には実数部と虚数部を指定します。
虚数部をj(iではない！！)で記述する場合と、complex関数を利用する2通りがあります。
また、実数部はreal、虚数部分はimageというプロパティでアクセスすることができます。
"""

# 複素数を定義
c1 = 2 + 3j
print(c1)    # (2+3j)

c2 = complex(5, 6)
print(c2)    # (5+6j)

# 実部と虚部を出力
print(c1.real)    # 2.0
print(c2.imag)    # 6.0

"""
簡単な計算

次回は演算について細かく解説しますが、練習としていくつか簡単な計算をしてみましょう。

変数に数値を代入して計算してみます。
"""

# 足し算結果を変数に代入する
x = 10
y = 20
z1 = x + y
print(z1)    # 30

# 変数に演算結果を直接代入する
z2 = 10 - 20
print(z2)    # -10

# 掛け算結果を表示する
print(10 * 20)    # 200

# 割り算の結果を変数に代入する
z3 = x / y
print(z3)    # 0.5

"""
上の結果のように、数値型変数同士で演算、変数に数値の演算結果を直接代入、
print関数の引数として演算を指定、といったことができます。
プログラミング初心者の方は実際に入力して試してみてください。
"""
