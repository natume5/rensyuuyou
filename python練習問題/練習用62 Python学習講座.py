#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座---")
print("--- 初めてのプログラミング編 Pythonとは？---")


"""
Pythonとは

　Pythonとは近年人気が高まっているプログラミング言語の1つです。
高度な科学技術計算や機械学習などに向いている一方、
スクリプト言語の一種でコンパイルせずにすぐに動かすことができるため、
プログラミング未経験の方にも比較的優しい言語です。

Pythonで何ができる？

　Pythonでできること、と見出しを打ちましたができないことのほうが少ないのかもしれません。
身近な例を挙げると以下のような便利ツールを自分で作れるようになります。
仕事の効率化や趣味、研究に活用できそうですね。

    インターネット上からのデータの自動収集
    ブラウザの自動操作
    PCの自動操作
    LineやTwitterのチャットボット
    データの可視化
    画像処理

趣味から離れた高度な分野だと、データのバッチ処理、Webアプリケーションといった業務系処理や、
統計分析、機械学習といった科学技術計算でも広く使用されています。


バッチ処理

　データを一括で更新したり抽出するような処理をバッチ処理と呼びます。
複雑な計算もPythonだとシンプルに記述することができ、
また、リレーショナルデータベースやExcel、CSVといったデータ連携ライブラリが数多く提供されているため、
Pythonを使用すると業務や分析向けのバッチをすばやく実装することが可能です。


ウェブアプリケーション

　我々が日々使用するSNSやニュースサイト等のウェブサービスはウェブアプリケーションと呼ばれる
アプリケーションがサーバーで動作してサービスを提供しています。
Pythonでウェブサービスを作ることも可能です。
Pythonが使用されている有名なサービスにInstagram、DropBoxなどが挙げられます。


科学技術計算

　Pythonの最大のメリットの1つが、統計計算を始めとした科学技術演算のライブラリが充実している点が
挙げられます。このため、近年注目を集めている機械学習には外せない言語となっています。
また、統計計算ライブラリも充実しているため、業務データの分析や可視化にも大活躍します。

Pythonのメリット

　Pythonのメリットとして挙げられるのが、上にも書いたとおり難しい処理のライブラリが
非常に充実しているという点です。このため、何か実装する場合、
既存のコードをつなぎ合わせるだけで複雑なプログラムを短期間で作ることが可能となります。

また、プラットホームを選ばないというメリットも有ります。
一部例外はありますが、例えばWindowsで記述したコードをMacやLinuxで動かすことが可能です。

Pythonのデメリット

　Pythonのデメリットとして、実行速度は速くない、という点が挙げられます。
ただし、これはスクリプト言語全般に当てはまることでしょう。

　また、Pythonは動的型付け言語と呼ばれる種類の言語で、
さらに、スコープが曖昧、(ほぼ)どこからでもコードの書き換えが可能、
といった「ゆるい」特徴があります。
このため、様々なレベルの大勢のエンジニアが参加する大規模な業務システムの開発で
使用する場合はかなりの注意を要します。

初心者向けの学習方法

　初めてのプログラミング編ではプログラミング未経験者向けに解説を進めます。
私がおすすめする学習方法はとにかくサンプルをたくさん動かす、ということです。

細かい用語や動作原理を学習することはもちろん大切ですが、
むしろそういったことを学習する前にある程度慣れておくとその後の学習がスムーズになります。
"""


print("--- 初めてのプログラミング編 Pythonスクリプトを動かしてみよう---")


"""
インストールと実行

Windowsをお使いの方はこちらのページを参考にPythonをインストールしてください。
Macの場合はXcodeをインストールすると同梱されてインストールされます。
以降、Windows向けに説明しますが、Macをお使いの方は適宜読み替えてください。

Pythonスクリプトの作成

インストールが終わったら適当な名前で作業用のディレクトリを作成し、
そこにメモ帳で「sample.py」というテキストファイルを作成してください。
テキストファイルの中身には以下の1行を記入します。
"""

print("Hello World!")

"""
Pythonはこのようなテキストファイルにプログラムを書き実行しますが、
このような拡張子が.pyとなるテキストファイルをPythonスクリプトと呼びます。
"""

"""
Pythonスクリプトの実行

それではいよいよPythonを実行してみましょう。
まず、コマンドプロンプトかWindows PowerShellを起動し、
さきほど作成した作業用ディレクトリに移動してください。
例えば、c:\pyworkというディレクトリに移動する場合、以下のようにコマンドを実行します。

cd C:\pywork\ 

次に、pythonコマンドでpythonスクリプトを実行します。
pythonの後ろに先ほど作成したPythonスクリプト、sample.pyを指定します。

python sample.py

いかがでしょうか？「Hello, World!」という文字列が出力されると成功です。
先ほど作成したPythonスクリプトは「print関数」と呼ばれるもので、
クォーテーションで囲んだ文字列を表示します。

なお、メモ帳のようにコードを書くアプリケーションのことをエディタと呼びます。
また、PowerShellのようなコマンドラインを実行するアプリケーションのことをターミナルと呼びます。
最初のうちは以下のようにエディタとターミナルを並べて実行するとはかどるかと思います。

また、文字列が表示されましたがこれを「出力される」と呼ぶ場合があります。
"""

"""
補足2 対話モード

Pythonにはスクリプトを実行する以外に対話モードと呼ばれる実行方法があります。
これはスクリプトを作成せずにコマンドライン上で対話的にPythonを実行できる機能で、
非常に便利なPythonの機能の1つです。
ただし、最初のうちはどこから実行したのか混乱する場合が多いため、
当講座では終盤までスクリプトを作成して実行する方法で解説します。

演習

それでは、演習です。たくさんコードを書いて実行することはプログラミング上達のコツの1つです。
演習1

　以下のように「こんにちは」というテキストを出力させるスクリプトを作成してみてください。

こんにちは。

演習1解答例

さきほどのprintの中に適当な文字列を設定することができます。
ただし、次回以降に説明しますが一部の文字列は指定することができません。
"""

print("こんにちは～。")

"""
演習2

以下のように3行の自己紹介のテキストを出力させるスクリプトを作成してみてください。

こんにちは。
私の名前は鈴木です。
Pythonが趣味です。
"""

print("こんにちは")
print("私の名前は鈴木です。")
print("Pythonが趣味です。")

"""
演習2解答例

さきほどのprintを追加していくらでも出力を追加することができます。

print("こんにちは。")
print("私の名前は鈴木です。")
print("Pythonが趣味です。")

上の演習以外にもいろいろな文字列を出力して遊んでみてください。
"""


print("--- 初めてのプログラミング編 変数を使って計算してみよう---")


"""

"""








