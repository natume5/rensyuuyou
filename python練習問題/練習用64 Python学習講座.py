#!/usr/bin/python
# -*- coding: UTF-8 -*-


print("--- Python学習講座---")
print("--- 初めてのプログラミング編 リストとループを使ってみよう---")


"""
リストとは

リストとは、「順番に並べられた複数の値」をひとかたまりとして扱える変数の型を指します。

例えば

    1回目から5回目までのテストの結果
    出席番号順の生徒の身長
    数列
    時系列ごとの株価

といった順序付けられた複数の値をまとめて扱いたい場合に活躍します。

では、実際にリストを使ってみましょう。リストを生成する場合、大カッコで並べた値を囲みます。
例えば、5回のテストの結果、69, 70, 81, 80, 70という5つの数字をリストに格納する場合、
以下のようになります。
"""

points = [69, 75, 81, 80, 77]

"""
リストに格納されたそれぞれの値のことをリストの要素と呼びます。
上の例だと、「75はリストpointsの要素です。」「100はリストpointsの要素ではありません。」
といった言い方をします。

また、リスト自体をprint関数の引数に指定すると中身を確認することができます。
"""

print(points)

"""
上のコードを実行すると、以下の結果が表示されます。

[69, 75, 81, 80, 77]
"""

"""
リストの要素を参照・更新する

先程のリストのデータ構造は以下のようなイメージとなります。

要素毎に0から番号がつけられていますが、この番号のことを添字若しくはインデックスと呼びます。
例えば「0番目の要素の値は69です。」「2番目の要素の値は81です。」といった使い方をします。
番号は0から数える、という点に注意してください(超重要！！)。

リストの要素を取り出したい場合はインデックスを指定します。
リストのインデックス指定参照
リスト[インデックス]

例として、(0から数えて)2番目の要素を取り出して変数xに格納してみましょう。
"""

my_list = [1, 3, 5, 7, 9]
x = my_list[2]
print(x)    # 5が表示される

"""
また、インデックス指定したものに値を代入すると、リストの値を更新することができます。
"""

my_list[2] = 100
print(my_list)    # [1, 3, 100, 7, 9]

"""
実際に手を動かしてリストの値が変わっていることを確認してください。


リストをループ処理

次に、リストの要素をループ処理で取り出してみましょう。ループ処理とは、繰り返し処理とも呼ばれ、
特定の処理を繰り返します。

Pythonにはループ処理を実行する方法がいくつか用意されていますが、
代表的なものにfor文というものが挙げられます。for文は以下の構文となります。
リストのループ処理
for ループ内変数 in リスト:
    処理

リストの先頭から順に取り出した値がループ内変数に格納され、for文の内部で使用することができます。
if文の時と同様、処理内部はスペース4個分のインデントをつけてブロックにします。

具体的な例を見てみましょう。
1回から5回までのテストの結果が格納されたリストの値を順に表示させてみます。
"""

points = [69, 75, 81, 80, 77]
for x in points:
	print(x)

"""
次に、先程の1回から5回までのテストの結果が格納されたリストの値を順に足し算して合計を求めてみます。
合計は変数sum_valに格納することにします。
"""

sum_val = 0
points = [69, 75, 81, 80, 77]
for x in points:
	sum_val = sum_val + x
	print("現在のsum_val・・・", sum_val)

print("合計・・・", sum_val)

"""
実行結果

現在のsum_val・・・ 69
現在のsum_val・・・ 144
現在のsum_val・・・ 225
現在のsum_val・・・ 305
現在のsum_val・・・ 382
合計・・・ 382

変数sum_valに順番に値が足しこまれていることが確認できます。

もう1つ例です。"こんにちは"を5回表示させてみます。
"""

my_list = [1, 2, 3, 4, 5]
for x in my_list:
	print("こんにちは")

"""
このようにループ内変数を使用しない場合もあります。
また、このような処理の場合、100回表示させるとなると大変ですね。
このようなときのために、Pythonにはrangeというものが用意されています。
以下のプログラムは"こんにちは"を100回表示させることができます。
"""

for x in range(100):
	print("こんにちは")


"""
演習

では演習です。
演習問題1

鈴木さんは、1回から5回までのテストの結果が以下の通りでした。

    1回目:89点
    2回目:70点
    3回目:66点
    4回目:88点
    5回目:82点

テストの結果を表すリストを作成し、3回目のテストの結果を表示させてください。
また、ループ処理で合計を求めてみてください。
"""

# リスト
points = [89, 70, 66, 88, 82]

# 3回目は0から数えて2番目のインデックス
print(points[2])

# 順番に処理してmy_sumに足す
my_sum = 0
for p in points:
	my_sum = my_sum + p

print(my_sum)

"""
演習問題2

前回学習したif文と組み合わせて、80点以上の結果だけを合計してください。
"""

# リスト
points = [89, 70, 66, 88, 82]

# 順番に処理してmy_sumに足す
my_sum = 0
for p in points:
	if p >= 80:
		# 80点以上の場合のみ足し算
		my_sum = my_sum + p

print(my_sum)

"""
演習問題3

"こんばんは"を50回表示させるコードを作成してください。
"""

for x in range(50):
	print('こんばんは！')


print("--- 初めてのプログラミング編 関数を使ってみよう---")


"""
関数とは

関数とは一言で説明すると「再利用できる処理の塊」のことを指します。
関数に引数（ひきすう）と呼ばれる入力値を指定すると、何らかの処理を実行してくれます。

組み込み関数の例

通常、関数は自分で作成することが多いのですが、
Pythonには予めいくつか関数が用意されており、組み込み関数と呼ばれています。
例えば、今まで使ってきたprint関数は組込関数の一種です。print関数を例に使い方を見てみましょう。
"""

text = 'こんにちは'
print(text)

"""
上の例の場合「引数にtextを指定してprint関数を実行した」状況です。
関数を実行することを「関数を呼び出す」と書く場合もあります。


関数の戻り値

また、関数には処理をした値を出力値として返してくれるものもあります。
この出力値のことを「戻り値」と呼びます。

数値のリストなどの合計値を計算して値を返してくれる組み込み関数、
sumが例として挙げられます。実際に使ってみましょう。
"""

mylist = [1, 2, 3, 4, 5]
sum_var = sum(mylist)
print(sum_var)

"""
上のプログラムを実行すると、[1, 2, 3, 4, 5]の数値の合計がsum関数で実行されます。
戻り値は関数呼び出しとイコールで結んだ左辺の変数に代入されます。

戻り値のある関数の呼び出し方は、以下のようになります。
関数呼び出し
戻り値を格納する変数 = 関数名(引数)
"""
"""
複数の引数、複数の戻り値

上の例では、引数に対して単一の値を指定しましたが、複数の値を並べて書いたりする場合もあります。
また、複数の値を返す関数も存在します。
例えば、divmodという関数は、2数の商と剰余を返す関数です。
呼び出す場合、以下のように記述します。16÷3の商と剰余を変数q, mに格納しています。
"""

q, m = divmod(16, 3)
print(q, m)

"""
上のコードの通り、複数の引数をカンマで区切って並べます。
また、複数の戻り値は変数をカンマで並べて格納することができます。
"""


"""
補足 組込関数の引数と戻り値はどうやって調べるの？

様々な組込関数が用意されていますが、大抵のエンジニアは全部覚えているわけではなく、
必要に応じて公式ドキュメントを参考にします。

どんな組み込み関数があるのか興味がある方は是非参考にしてください。
https://docs.python.org/ja/3/library/functions.html
"""


"""
演習
演習問題1

組込関数のlenは引数に指定したリストの要素数を返してくれます。
このlen関数を使用して、リスト[1, 3, 5, 7, 9]の要素数を表示させてください。
"""

list = [1, 3, 5, 7, 9]
x = len(list)
print(x)

"""
関数で躓く方は結構多いのですが、まずは使うということから始めると
比較的楽に学習を進められると思います。
次回は関数を独自に作成してみましょう。
"""


print("--- 初めてのプログラミング編 関数を作ってみよう---")


"""
前回、組み込み関数を使ってみました。
関数は組み込みのもの以外にプログラマが自身で作成することが可能です。

独自に関数を作る方法

初歩的な関数は以下の構文で作成することができます。
「関数の処理はこうしますよ」という処理を記述するのですが、こういった記述を関数の定義とも呼びます。
実際、defは英語のdefine（定義する）の略からきています。

def 関数名(引数1, 引数2, ・・・):
    処理
    return 戻り値

関数を作る際はdefで宣言をします。また、関数名に続く括弧で引数と呼ばれる変数を定義します。
もっとも、これだけだと何のことかわからないと思いますので、具体的な例をみて学習しましょう。

まず、比較的簡単な関数、「引数で指定した2つの数字を足す」処理を作ってみます。
"""

def add2numbers(x, y):
	z = x + y
	return z

ans = add2numbers(2, 3)
print(ans)    # 和の5が表示される
"""
関数名としてadd2numbersという名前を付けました。
2数の引数はx, yという名前を付けています。
また、x + y を計算してzに格納し戻り値として返しています。

せっかく関数を作ったので使ってみましょう。呼び出し方は組み込み関数のときと同様です。
以下は作った関数add2numbersを使用して2と3の和を求めています。
"""
"""
さて、2数を足すだけだと今までどおり関数を使わないプログラムでもいいじゃないか、
と思う方もいるのではないでしょうか？
実際、簡単な処理を1回実行するならば関数を使わなくてもいいのですが、
関数を使用すると複雑な処理が1回書いただけで何回も使いまわすことができるようになります。

上の関数では和を戻り値として返しましたが、戻り値のない関数も作ることができます。
例えば、以下のコードは「引数で受け取った2数の和をprint出力する関数」です。
戻り値は必ずしも必要というわけではありません。
"""

def add2numbers(x, y):
	z = x + y
	print(z)    # 戻り値がない

add2numbers(2, 3)    # 和の5が表示される

"""
Pythonは他のプログラミング言語と比較して関数の機能が強力で、様々な書き方が存在します。
興味がある方は是非入門編へ勉強を進めてください。
"""


"""
演習
演習問題1

3つの数を足す関数を作成してください。また、作成した関数を任意の引数で3回呼び出してください。
"""

def add3numbers(x, y, z):
	w = x + y + z
	return w

ans1 = add3numbers(1, 2, 3)
print(ans1)

ans2 = add3numbers(2, 3, 4)
print(ans2)

ans3 = add3numbers(5, 6, 7)
print(ans3)

"""
演習問題2

引数で指定した数値のリストを足し上げる関数を作成してください。
また、作成したプログラムを呼び出してください。
"""

def mysum(numberlist):
	sum_val = 0
	for x in numberlist:
		sum_val = sum_val + x
	return sum_val

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ans = mysum(l)
print(ans)    # 55


print("--- 初めてのプログラミング編 メソッドを使ってみよう---")


"""
メソッドとは

これまでの講義で組み込みの関数を使用したり自分で関数を作ったりしました。
今回はメソッドについて解説します。メソッドとは変数が持っている機能の一種で、
関数のように呼び出して使用することができます。大抵の変数の型はいくつかメソッドが用意されています。

メソッドは以下の構文で呼び出しができます。
変数とメソッド名をドットで繋いで呼び出しますが、ほとんど関数と同じですね。

メソッドの呼び出し
変数.メソッド名(引数)

また、メソッドから戻り値を得ることができる場合があります。
戻り値がある場合は以下のように変数に格納することができます。

戻り値のあるメソッドの呼び出し
戻り値を格納する変数 = 変数.メソッド名(引数)

また、関数とは異なり、メソッドを実行すると変数の状態が変化する場合もあります。
後で具体例を用いて説明します。

文章だけだとなかなかイメージしづらい部分が多いため、さっそく実際に使ってみましょう。

メソッドの例
メソッドの例 その1 replace

文字列型の変数には様々なメソッドが用意されています。
よく使用されるものとしてreplaceメソッドが挙げられます。
replaceメソッドは、文字列型の変数の指定した部分文字列を置換した文字列を返します。

文字列置換
文字列型変数.replace("置換される文字列", "置換後の文字列")

例えば、以下のコードでは文字列"aaa bbb abc"のaaaの部分をXXXに
置換した値を変数text2に格納しています。
"""

text1 = 'aaa bbb abc'
text2 = text1.replace('aaa', 'xxx')
print(text2)    # xxx bbb abc

"""
メソッドの例 その2 append

list型の変数はappendメソッドを使用して要素を追加することができます。
appendメソッドは戻り値がない代わりに、元のlist型変数の状態が変わります。

リストの要素の追加
list型変数.append(追加する要素)

例えば、以下のコードでは1, 2, 3が格納されたリストに4を追加しています。
"""

l = [1, 2, 3]
l.append(4)
print(l)    # [1, 2, 3, 4]

"""
最初、要素が[1, 2, 3]だったリストlがappendメソッドを実行すると
[1, 2, 3, 4]というように要素が追加されていることが確認できます。
このようにものとデータが変わったことを上で「状態が変わる」と表現しました。
このようなメソッドは「破壊的に作用する」と呼びます。
"""


"""
補足　オブジェクト

補足としてオブジェクトについて説明します。
非常に重要な概念なのですが、説明すると長くなるため、
正確性を犠牲にして簡潔に概念的なものを説明します。

プログラミングには「オブジェクト」と呼ばれる用語があります。
数値のような基本的なデータではなく「いくつかの値とメソッドが纏まったモノ」
をオブジェクトと呼称することが多いです。
ですが、Pythonの場合はすべての変数はオブジェクトをして扱われます
（実際、Pythonの大抵の変数の型には上で説明したようにメソッドが用意されています。）。

例えばリスト型変数をリスト型オブジェクトと呼ぶ場合もあります。
ただし、特に基本的な変数以外で「いくつかの値とメソッドが纏まった」
変数をオブジェクトと慣例的に呼ぶ場合があります。
今後の説明で「XXXオブジェクト」と出てきた場合は少し特殊な変数の型なのだ、
と考えていただいて差し支えありません。
"""


"""
演習
演習問題1

上で解説した文字列のreplaceメソッドを使用して、
文字列"XYY XYY XYZ"のXをWに置換してみてください。
"""

text1 = 'XYY XYY XYZ'
text2 = text1.replace('X', 'W')
print(text2)    # WYY WYY WYZ

"""
演習問題2

文字列型の変数には、全てを小文字に変換した文字列を返すlowerメソッドがあります。
引数はありません。このlowerメソッドを使用して、
適当な英数字の文字列を全て小文字に変換してみてください。

文字列置換
文字列型変数.lower()
"""

text1 = 'ABCDEFG HIJKLMN'
text2 = text1.lower()
print(text2)    # abcdefg hijklmn
